struct ELF_EHDR = 16{E_IDENT}, <E_TYPE>, <E_MACHINE>, [E_VERSION], [E_ENTRY], [E_PHOFF], [E_SHOFF], [E_FLAGS], <E_EHSIZE>, <E_PHENTSIZE>, <E_PHNUM>, <E_SHENTSIZE>, <E_SHNUM>, <E_SHSTRNDX>;
struct ELF_SHDR = [SH_NAME], [SH_TYPE], [SH_FLAGS], [SH_ADDR], [SH_OFFSET], [SH_SIZE], [SH_LINK], [SH_INFO], [SH_ADDRALIGN], [SH_ENTSIZE];
struct ELF_SYM = [ST_NAME], [ST_VALUE], [ST_SIZE], {ST_INFO}, {ST_OTHER}, <ST_SHNDX>;
struct ELF_PHDR = [P_TYPE], [P_OFFSET], [P_VADDR], [P_PADDR], [P_FILESZ], [P_MEMSZ], [P_FLAGS], [P_ALIGN];
struct ELF_REL = [R_OFFSET], [R_INFO];
const SHT_PROGBITS = 1, SHT_SYMTAB = 2, SHT_STRTAB = 3, SHT_REL = 9;
const PT_LOAD = 1;
struct CFILE = [CFILE_SEEK], [CFILE_DATA], FILE{CFILE_FILE};

function cstrcmp(x, y)
(i)
{
    if (x{y.[STRINGLEN]} != 0) return FALSE;
    i = 0;
    while (i <! y.[STRINGLEN])
    {
        if (x{i} != y.[STRINGPTR]{i}) return FALSE;
        i += 1;
    }
    return TRUE;
}

function cmalloc(x)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    x = malloc(x);
    POP EDI
    POP ESI
    POP EBX
    return x;
}

function cfree(x)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    free(x);
    POP EDI
    POP ESI
    POP EBX
}

function cexit(x)
{
    exit();
}

function cprint(fmt)
(s{STRING})
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    s.[STRINGPTR] = fmt;
    s.[STRINGLEN] = 0;
    while (fmt{s.[STRINGLEN]}) s.[STRINGLEN] += 1;
    print(s);
    POP EDI
    POP ESI
    POP EBX
}

function cgetenv(s)
(x)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    x = NULL;
    if (cstrcmp(s, "HOME")) x = ".\0".[STRINGPTR];
    POP EDI
    POP ESI
    POP EBX
    return x;
}

function copen(p, m)
(cf, s{STRING})
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    s.[STRINGLEN] = 0;
    s.[STRINGPTR] = p;
    while (p{s.[STRINGLEN]}) s.[STRINGLEN] += 1;
    cf = malloc(CFILE);
    cf.[CFILE_DATA] = NULL;
    cf.[CFILE_SEEK] = 0;
    if (!open(s, &cf{CFILE_FILE}, 0))
    {
        free(cf);
        cf = NULL;
    }
    POP EDI
    POP ESI
    POP EBX
    return cf;
}

function cclose(f)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    free(f.[CFILE_DATA]);
    free(f);
    POP EDI
    POP ESI
    POP EBX
    return 0;
}

function cread(f, p, n)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    if (!f.[CFILE_DATA])
    {
        f.[CFILE_DATA] = malloc(f.[CFILE_FILE + FILE_SIZE]);
        read(&f{CFILE_FILE}, f.[CFILE_FILE + FILE_SIZE], f.[CFILE_DATA]);
    }
    memcpy(p, f.[CFILE_DATA] + f.[CFILE_SEEK], n);
    f.[CFILE_SEEK] += n;
    POP EDI
    POP ESI
    POP EBX
    return n;
}

function cwrite(f, p, n)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    POP EDI
    POP ESI
    POP EBX
    return NULL;
}

function cseek(f, o, w)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    f.[CFILE_SEEK] = (w == 0 ? 0 : w == 1 ? f.[CFILE_SEEK] : f.[CFILE_FILE + FILE_SIZE]) + o;
    POP EDI
    POP ESI
    POP EBX
    return 0;
}

function ctell(f)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    f = f.[CFILE_SEEK];
    POP EDI
    POP ESI
    POP EBX
    return f;
}

function ceof(f)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    f = f.[CFILE_SEEK] >=! f.[CFILE_FILE + FILE_SIZE];
    POP EDI
    POP ESI
    POP EBX
    return f;
}

function cgettime(osec, ousec)
{
    PUSH EBX
    PUSH ESI
    PUSH EDI
    *osec = timer_ms /! 1000;
    *ousec = (timer_ms %! 1000) *! 1000;
    POP EDI
    POP ESI
    POP EBX
}

function load_elf(path, osymtab, ostrtab, osyms)
(f{FILE}, ehdr{ELF_EHDR}, phdrs, shdrs, total_size, i, e, j, mem)
{
    if (!open(path, f, 0)) return NULL;
    read(f, ELF_EHDR, ehdr);
    total_size = 0;
    phdrs = malloc(ehdr.<E_PHNUM> *! ELF_PHDR);
    seek(f, ehdr.[E_PHOFF]);
    read(f, ehdr.<E_PHNUM> *! ELF_PHDR, phdrs);
    i = 0;
    while (i <! ehdr.<E_PHNUM>)
    {
        if (phdrs.[i *! ELF_PHDR + P_TYPE] == PT_LOAD)
        {
            e = phdrs.[i *! ELF_PHDR + P_VADDR] + phdrs.[i *! ELF_PHDR + P_MEMSZ];
            if (e >! total_size) total_size = e;
        }
        i += 1;
    }
    mem = malloc(total_size);
    i = 0;
    while (i <! ehdr.<E_PHNUM>)
    {
        if (phdrs.[i *! ELF_PHDR + P_TYPE] == PT_LOAD)
        {
            seek(f, phdrs.[i *! ELF_PHDR + P_OFFSET]);
            read(f, phdrs.[i *! ELF_PHDR + P_FILESZ], mem + phdrs.[i *! ELF_PHDR + P_VADDR]);
            memset(mem + phdrs.[i *! ELF_PHDR + P_VADDR] + phdrs.[i *! ELF_PHDR + P_FILESZ], 0, phdrs.[i *! ELF_PHDR + P_MEMSZ] - phdrs.[i *! ELF_PHDR + P_FILESZ]);
        }
        i += 1;
    }
    free(phdrs);
    shdrs = malloc(ehdr.<E_SHNUM> *! ELF_SHDR);
    seek(f, ehdr.[E_SHOFF]);
    read(f, ehdr.<E_SHNUM> *! ELF_SHDR, shdrs);
    i = 0;
    *osymtab = NULL;
    *ostrtab = NULL;
    while (i <! ehdr.<E_SHNUM>)
    {
        if (shdrs.[i *! ELF_SHDR + SH_TYPE] == SHT_SYMTAB)
        {
            free(*osymtab);
            *osymtab = malloc(shdrs.[i *! ELF_SHDR + SH_SIZE]);
            *osyms = shdrs.[i *! ELF_SHDR + SH_SIZE] /! shdrs.[i *! ELF_SHDR + SH_ENTSIZE];
            seek(f, shdrs.[i *! ELF_SHDR + SH_OFFSET]);
            read(f, shdrs.[i *! ELF_SHDR + SH_SIZE], *osymtab);
        }
        else if (shdrs.[i *! ELF_SHDR + SH_TYPE] == SHT_STRTAB and i != ehdr.<E_SHSTRNDX>)
        {
            free(*ostrtab);
            *ostrtab = malloc(shdrs.[i *! ELF_SHDR + SH_SIZE]);
            seek(f, shdrs.[i *! ELF_SHDR + SH_OFFSET]);
            read(f, shdrs.[i *! ELF_SHDR + SH_SIZE], *ostrtab);
        }
        else if (shdrs.[i *! ELF_SHDR + SH_TYPE] == SHT_REL)
        {
            e = mem + shdrs.[i *! ELF_SHDR + SH_OFFSET];
            j = 0;
            while (j <! shdrs.[i *! ELF_SHDR + SH_SIZE] /! ELF_REL)
            {
                mem.[e.[j *! ELF_REL + R_OFFSET]] += mem;
                j += 1;
            }
        }
        i += 1;
    }
    free(shdrs);
    return mem;
}

global doom_get_sound_buffer, doom_sound_buf, doom_sound_i;
function doom_sound_read(a, b, n)
(left, right, i, r)
{
    r = n;
    i = 0;
    while (n)
    {
        if (doom_sound_i >=! 1024 or !doom_sound_buf)
        {
            doom_sound_buf = doom_get_sound_buffer();
            doom_sound_i = 0;
        }
        left = doom_sound_buf<doom_sound_i>;
        right = doom_sound_buf<doom_sound_i + 1>;
        doom_sound_i += 2;

        b<i> = left;
        b<i + 1> = right;
        n -= 4;
        if (!n) break;

        b<i + 2> = left;
        b<i + 3> = right;
        n -= 4;
        if (!n) break;

        b<i + 4> = left;
        b<i + 5> = right;
        n -= 4;
        if (!n) break;

        b<i + 6> = left;
        b<i + 7> = right;
        n -= 4;

        i += 8;
    }
    return r;
}

function doom()
(mem, symtab, strtab, syms, i, p, k, doom_init, doom_set_malloc, doom_set_print, doom_set_exit, doom_set_getenv, doom_set_file_io, doom_set_gettime, doom_update, doom_get_framebuffer, doom_key_down, doom_key_up, doom_button_down, doom_button_up, doom_mouse_move, doom_set_default_int, m{MOUSE_EVENT}, mx, my, sas)
{
    create_window(100, 100, 320, 200);
    mem = load_elf("doom.elf", &symtab, &strtab, &syms);
    if (!mem) return print("Could not load ELF\n");
    
    i = 0;
    while (i <! syms)
    {
        p = strtab + symtab.[i *! ELF_SYM + ST_NAME];
        if (cstrcmp(p, "doom_set_malloc")) doom_set_malloc = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_set_print")) doom_set_print = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_set_getenv")) doom_set_getenv = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_set_file_io")) doom_set_file_io = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_set_exit")) doom_set_exit = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_set_gettime")) doom_set_gettime = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_init")) doom_init = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_update")) doom_update = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_get_framebuffer")) doom_get_framebuffer = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_key_down")) doom_key_down = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_key_up")) doom_key_up = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_button_down")) doom_button_down = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_button_up")) doom_button_up = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_mouse_move")) doom_mouse_move = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_set_default_int")) doom_set_default_int = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        else if (cstrcmp(p, "doom_get_sound_buffer")) doom_get_sound_buffer = mem + symtab.[i *! ELF_SYM + ST_VALUE];
        i += 1;
    }

    free(symtab);
    free(strtab);

    MOV EAX, CR0
    AND EAX, 0xFFFFFFF3
    OR EAX, 0x22
    MOV CR0, EAX
    DB 0xDB, 0xE3 # FNINIT
    
    AND ESP, 0xFFFFFFF0
    doom_set_malloc(cmalloc, cfree);
    doom_set_print(cprint);
    doom_set_exit(cexit);
    doom_set_getenv(cgetenv);
    doom_set_file_io(copen, cclose, cread, cwrite, cseek, ctell, ceof);
    doom_set_gettime(cgettime);
    doom_set_default_int("key_up\0".[STRINGPTR], 'w');
    doom_set_default_int("key_down\0".[STRINGPTR], 's');
    doom_set_default_int("key_strafeleft\0".[STRINGPTR], 'a');
    doom_set_default_int("key_straferight\0".[STRINGPTR], 'd');
    doom_set_default_int("key_use\0".[STRINGPTR], 'e');
    doom_set_default_int("mouse_move\0".[STRINGPTR], 0);
    doom_init(0, 0, 0);
    sas = malloc(AUDIO_STREAM);
    sas.[AUDIO_STREAM_READ_FN] = doom_sound_read;
    sas.[AUDIO_STREAM_LOOP_FN] = NULL;
    sas.[AUDIO_STREAM_LOOPS] = -1;
    audio_stream_add(sas);
    task.[TASK_WINDOW]{WINDOW_FLAGS} = WINDOW_FGET_KEY_EVENTS | WINDOW_FGET_MOUSE_EVENTS;
    while (TRUE)
    {
        i = timer_ms;
        mx = 0;
        my = 0;
        while (task.[TASK_WINDOW].[WINDOW_KEY_EVENTS + VEC_LEN])
        {
            p = 0;
            vec_shift(&task.[TASK_WINDOW]{WINDOW_KEY_EVENTS}, &p);
            k = -1;
            switch (p & ~K_RELEASED)
            {
                case K_TAB: k = 9; break;
                case K_ENTER: k = 13; break;
                case K_ESC: k = 27; release_mouse(); break;
                case K_SPACE: k = 32; break;
                case K_QUOTE: k = '\''; break;
                case K_KSTAR: k = '*'; break;
                case K_COMMA: k = ','; break;
                case K_DASH: k = 0x2d; break;
                case K_DOT: k = '.'; break;
                case K_SLASH: k = '/'; break;
                case K_0: k = '0'; break;
                case K_1: k = '1'; break;
                case K_2: k = '2'; break;
                case K_3: k = '3'; break;
                case K_4: k = '4'; break;
                case K_5: k = '5'; break;
                case K_6: k = '6'; break;
                case K_7: k = '7'; break;
                case K_8: k = '8'; break;
                case K_9: k = '9'; break;
                case K_SEMICOLON: k = ';'; break;
                case K_EQUALS: k = 0x3d; break;
                case K_LBRACKET: k = '['; break;
                case K_RBRACKET: k = ']'; break;
                case K_A: k = 'a'; break;
                case K_B: k = 'b'; break;
                case K_C: k = 'c'; break;
                case K_D: k = 'd'; break;
                case K_E: k = 'e'; break;
                case K_F: k = 'f'; break;
                case K_G: k = 'g'; break;
                case K_H: k = 'h'; break;
                case K_I: k = 'i'; break;
                case K_J: k = 'j'; break;
                case K_K: k = 'k'; break;
                case K_L: k = 'l'; break;
                case K_M: k = 'm'; break;
                case K_N: k = 'n'; break;
                case K_O: k = 'o'; break;
                case K_P: k = 'p'; break;
                case K_Q: k = 'q'; break;
                case K_R: k = 'r'; break;
                case K_S: k = 's'; break;
                case K_T: k = 't'; break;
                case K_U: k = 'u'; break;
                case K_V: k = 'v'; break;
                case K_W: k = 'w'; break;
                case K_X: k = 'x'; break;
                case K_Y: k = 'y'; break;
                case K_Z: k = 'z'; break;
                case K_BACKSPACE: k = 127; break;
                case K_LCTRL: case K_RCTRL: k = 0x80 + 0x1d; break;
                case K_LEFT: k = 0xac; break;
                case K_UP: k = 0xad; break;
                case K_RIGHT: k = 0xae; break;
                case K_DOWN: k = 0xaf; break;
                case K_LSHIFT: case K_RSHIFT: k = 0x80 + 0x36; break;
                case K_LALT: case K_RALT: k = 0x80 + 0x36; break;
                case K_F1: k = 0x80 + 0x3b; break;
                case K_F2: k = 0x80 + 0x3c; break;
                case K_F3: k = 0x80 + 0x3d; break;
                case K_F4: k = 0x80 + 0x3e; break;
                case K_F5: k = 0x80 + 0x3f; break;
                case K_F6: k = 0x80 + 0x40; break;
                case K_F7: k = 0x80 + 0x41; break;
                case K_F8: k = 0x80 + 0x42; break;
                case K_F9: k = 0x80 + 0x43; break;
                case K_F10: k = 0x80 + 0x44; break;
                case K_F11: k = 0x80 + 0x57; break;
                case K_F12: k = 0x80 + 0x58; break;
                case K_PAUSE: k = 0xff; break;
            }
            if (p & K_RELEASED) doom_key_up(k);
            else doom_key_down(k);
        }
        while (task.[TASK_WINDOW].[WINDOW_MOUSE_EVENTS + VEC_LEN])
        {
            vec_shift(&task.[TASK_WINDOW]{WINDOW_MOUSE_EVENTS}, m);
            if (!mouse_captured)
            {
                if (m{MOUSE_FLAGS} & MOUSE_LMB_DOWN) capture_mouse();
            }
            else
            {
                if (m{MOUSE_FLAGS} & MOUSE_LMB_DOWN) doom_button_down(0);
                if (m{MOUSE_FLAGS} & MOUSE_RMB_DOWN) doom_button_down(1);
                if (m{MOUSE_FLAGS} & MOUSE_MMB_DOWN) doom_button_down(2);
                if (m{MOUSE_FLAGS} & MOUSE_LMB_UP) doom_button_up(0);
                if (m{MOUSE_FLAGS} & MOUSE_RMB_UP) doom_button_up(1);
                if (m{MOUSE_FLAGS} & MOUSE_MMB_UP) doom_button_up(2);
                mx += m.[MOUSE_X];
                my += m.[MOUSE_Y];
            }
        }
        if (mx or my) doom_mouse_move(mx *$ 4, my *$ 4);
        doom_update();
        write_rect(0, 0, 320, 200, doom_get_framebuffer(4));
        sleep(maxs(0, 16 - (timer_ms - i)));
    }
.end:
    audio_stream_remove(sas);
    free(mem);
}

new_task("DOOM", doom, 0);