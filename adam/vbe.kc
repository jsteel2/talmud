const VBE_MODE_PTR = 0xE, VBE_ATTRIBUTES = 0x0, VBE_PITCH = 0x10, VBE_WIDTH = 0x12, VBE_HEIGHT = 0x14, VBE_BPP = 0x19, VBE_MEMORY_MODEL = 0x1B, VBE_FRAMEBUFFER = 0x28;

global framebuffer, fb_pitch, fb_width, fb_height;
global cursor_x, cursor_y, ocursor_x, ocursor_y, mouse_captured;
global windows;
const CURSOR_W = 4, CURSOR_H = 4;
const BACKGROUND_COLOR = 0x5C96C9;

function set_resolution(x, y)
(ctrl, inf, modes, i, eax, ecx, ebx, edi, unused)
{
    ctrl = DISK_BUF;
    inf = DISK_BUF + 512;
    ctrl[0] = '2EBV';
    eax = 0x4F00;
    edi = ctrl %! 16;
    interrupt(0x10, &eax, &unused, &unused, &unused, &unused, &edi, 0, ctrl /! 16);
    modes = ctrl.<VBE_MODE_PTR> + ctrl.<VBE_MODE_PTR + 2> *! 16;
    i = 0;
    while (modes<i> != 0xFFFF)
    {
        eax = 0x4F01;
        ecx = modes<i>;
        edi = inf %! 16;
        interrupt(0x10, &eax, &ecx, &unused, &unused, &unused, &edi, 0, inf /! 16);
        if (eax != 0x4F or (inf.<VBE_ATTRIBUTES> & 0x90) != 0x90 or (inf{VBE_MEMORY_MODEL} != 4 and inf{VBE_MEMORY_MODEL} != 6) or inf{VBE_BPP} != 32)
        {
            i += 1;
            JMP .x
        }
        if (inf.<VBE_WIDTH> == x and inf.<VBE_HEIGHT> == y)
        {
            ebx = modes<i> | 0x4000;
            edi = 0;
            eax = 0x4F02;
            interrupt(0x10, &eax, &unused, &unused, &ebx, &unused, &edi, 0, 0);
            framebuffer = inf.[VBE_FRAMEBUFFER];
            fb_pitch = inf.<VBE_PITCH>;
            fb_width = inf.<VBE_WIDTH>;
            fb_height = inf.<VBE_HEIGHT>;
            break;
        }
        i += 1;
.x:
    }
    framebuffer_refresh(0, 0, fb_width, fb_height, NULL);
}

function _framebuffer_refresh(x, y, w, h, win)
(buf, pb, pw, ow, oh, i)
{
    if (!windows)
    {
        return screen_fill_rect(x, y, w, h, BACKGROUND_COLOR);
    }
    if (x >=$ fb_width or y >=$ fb_height) return;
    if (x + w >$ fb_width) w -= (x + w) - fb_width;
    if (y + h >$ fb_height) h -= (y + h) - fb_height;
    if (x <$ 0) { w += x; x = 0; }
    if (y <$ 0) { h += y; y = 0; }
    if (w <$ 0) w = 0;
    if (h <$ 0) h = 0;
    if (!w and !h) return;
    if (win and win == windows)
    {
        screen_write_rect(x, y, w, h, win.[WINDOW_BUFFER] + (y - win.[WINDOW_Y]) *! win.[WINDOW_W] *! 4 + (x - win.[WINDOW_X]) *! 4, win.[WINDOW_W] *! 4);
    }
    else
    {
        buf = malloc(h *! w *! 4);
        if (!buf) return;
        if (!win)
        {
            memsetd(buf, BACKGROUND_COLOR, h *! w);
            win = windows;
            while (win.[WINDOW_BELOW]) win = win.[WINDOW_BELOW];
        }
        do
        {
            ow = maxs(0, mins(x + w, win.[WINDOW_X] + win.[WINDOW_W]) - maxs(x, win.[WINDOW_X]));
            oh = maxs(0, mins(y + h, win.[WINDOW_Y] + win.[WINDOW_H] + TITLEBAR_SIZE) - maxs(y, win.[WINDOW_Y]));
            if (ow and oh)
            {
                pb = buf + (maxs(y, win.[WINDOW_Y]) - y) *! w *! 4 + (maxs(x, win.[WINDOW_X]) - x) *! 4;
                pw = win.[WINDOW_BUFFER] + (maxs(y, win.[WINDOW_Y]) - win.[WINDOW_Y]) *! win.[WINDOW_W] *! 4 + (maxs(x, win.[WINDOW_X]) - win.[WINDOW_X]) *! 4;
                i = 0;
                while (i <! oh)
                {
                    memcpyd(pb, pw, ow);
                    pb += w *! 4;
                    pw += win.[WINDOW_W] *! 4;
                    i += 1;
                }
            }
            win = win.[WINDOW_ABOVE];
        } while (win);
        screen_write_rect(x, y, w, h, buf, w *! 4);
        free(buf);
    }
}

function framebuffer_refresh(x, y, w, h, win)
{
    _framebuffer_refresh(x, y, w, h, win);
    if (x <$ cursor_x + CURSOR_W and cursor_x <$ x + w and y <$ cursor_y + CURSOR_H and cursor_y <$ y + h) draw_cursor();
}

function screen_fill_rect(x, y, w, h, color)
(p, i)
{
    p = framebuffer + y *! fb_pitch + x *! 4;
    i = 0;
    while (i <! h)
    {
        memsetd(p, color, w);
        i += 1;
        p += fb_pitch;
    }
}

function screen_write_rect(x, y, w, h, p, ppitch)
(pf, i)
{
    pf = framebuffer + y *! fb_pitch + x *! 4;
    i = 0;
    while (i <! h)
    {
        memcpyd(pf, p, w);
        i += 1;
        pf += fb_pitch;
        p += ppitch;
    }
}

function draw_cursor()
(p)
{
    if (mouse_captured)
    {
        if (ocursor_x != cursor_x or ocursor_y != cursor_y) _framebuffer_refresh(ocursor_x, ocursor_y, 4, 4, NULL);
        ocursor_x = cursor_x;
        ocursor_y = cursor_y;
        return;
    }
    p = framebuffer + cursor_y *! fb_pitch;
    if (ocursor_x != cursor_x or ocursor_y != cursor_y) _framebuffer_refresh(ocursor_x, ocursor_y, 4, 4, NULL);
    p[cursor_x] = 0xFF0000;
    if (cursor_x + 1 <! fb_width) p[cursor_x + 1] = 0xFF0000;
    if (cursor_x + 2 <! fb_width) p[cursor_x + 2] = 0xFF0000;
    if (cursor_y + 1 <! fb_height) (p + fb_pitch)[cursor_x] = 0xFF0000;
    if (cursor_y + 2 <! fb_height) (p + fb_pitch *! 2)[cursor_x] = 0xFF0000;
    if (cursor_y + 1 <! fb_height and cursor_x + 1 <! fb_width) (p + fb_pitch)[cursor_x + 1] = 0xFF0000;
    if (cursor_y + 2 <! fb_height and cursor_x + 2 <! fb_width) (p + fb_pitch *! 2)[cursor_x + 2] = 0xFF0000;
    if (cursor_y + 3 <! fb_height and cursor_x + 3 <! fb_width) (p + fb_pitch *! 3)[cursor_x + 3] = 0xFF0000;
    ocursor_x = cursor_x;
    ocursor_y = cursor_y;
}