function switch_task2(t)
{
    MOV EAX, [t]
    MOV [task], EAX
    MOV ESP, [EAX + TASK_ESP]
    JMP [EAX + TASK_EIP]
}

function switch_task(t)
{
    MOV EAX, [task]
    PUSH EBP
    MOV [EAX + TASK_ESP], ESP
    MOV DWORD [EAX + TASK_EIP], .ret
    switch_task2(t);
.ret:
    POP EBP
}

global sound_task;

function next_task()
(f, c)
{
    if (sound_task and !sound_task{TASK_WAIT}) return switch_task(sound_task);
    f = c = task.[TASK_NEXT];
    while (c{TASK_WAIT})
    {
        if (c{TASK_WAIT} == 2 and timer_ms >! c.[TASK_WAIT_UNTIL])
        {
            c{TASK_WAIT} = FALSE;
            break;
        }
        c = c.[TASK_NEXT];
        if (c == f) HLT
        if (sound_task and !sound_task{TASK_WAIT}) return switch_task(sound_task);
    }
    switch_task(c);
}

function wait()
{
    task{TASK_WAIT} = TRUE;
    next_task();
}

function sleep(ms)
(x)
{
    x = timer_ms + ms;
    while (timer_ms <! x)
    {
        task{TASK_WAIT} = 2;
        task.[TASK_WAIT_UNTIL] = x;
        next_task();
    }
}

function new_task(name, entry, arg)
(t)
{
    t = malloc_task(TASK, ADAM);
    strdup_task(name, &t{TASK_NAME}, t);
    memcpy(&t{TASK_CWD}, &task{TASK_CWD}, FILE);
    t.[TASK_WINDOW] = NULL;
    t.[TASK_PRINT] = NULL;
    t.[TASK_NEXT] = task.[TASK_NEXT];
    t.[TASK_PREV] = task;
    compiler_init(&t{TASK_COMPILER}, t);
    t.[TASK_ESP] = &t{TASK_STACK} + TASK_STACK_SIZE - 8;
    t.[TASK_ESP][0] = exit;
    t.[TASK_ESP][1] = arg;
    t.[TASK_EIP] = entry;
    t{TASK_WAIT} = FALSE;
    t.[TASK_NEXT].[TASK_PREV] = t;
    task.[TASK_NEXT] = t;
    return t;
}

global task_clean;
function kill(t)
(m)
{
    if (task_clean) task_clean(t);
    t.[TASK_NEXT].[TASK_PREV] = t.[TASK_PREV];
    t.[TASK_PREV].[TASK_NEXT] = t.[TASK_NEXT];
    compiler_free(&t{TASK_COMPILER});
    if (t.[TASK_WINDOW]) delete_window(t.[TASK_WINDOW]);
    free(t.[TASK_NAME + STRINGPTR]);
    m = first_free;
    while (m)
    {
        if (m.[MEM_HEADER_TASK] == t) free(m + MEM_HEADER);
        m = m.[MEM_HEADER_NEXT];
    }
    free(t);
}

function exit()
(t)
{
    t = task.[TASK_PREV];
    kill(task);
    switch_task2(t);
}