global ans;

function eve(compiler)
(vec{VEC}, x)
{
    print("
i i i i i i i      mmmmmmm   mm   m      m    m m    m mmmm  
I I I I I I I         #      ##   #      ##  ## #    # #   \"m
I  \\ `+' /  I         #     #  #  #      # ## # #    # #    #
 \\  `-+-'  /          #     #mm#  #      # \"\" # #    # #    #
  `-__|__-'           #    #    # #mmmmm #    # \"mmmm\" #mmm\" 
      |
------+------

Welcome to TalmudOS (Formerly ChucksOS)
");

    vec_init(vec, 64, 1);
    while (TRUE)
    {
        print("> ");
        input(vec);
        x = compile(compiler, "stdin", vec);
        if (x)
        {
            vec.[VEC_LEN] = 0;
            ans = x();
            format(print, "ans=%d (%x)\n", ans, ans);
        }
        else
        {
            if (compiler.[CCUR + TOKEN_TYPE] != TEND) vec.[VEC_LEN] = 0;
        }
    }
}

function input(v)
(eax, unused)
{
    do {
        eax = 0;
        interrupt(0x16, &eax, &unused, &unused, &unused, &unused, &unused);
        format(print, "%c", eax & 0xff);
        vec_push1(v, (eax & 0xff) == '\r' ? '\n' : eax);
    } while ((eax & 0xff) != '\r');

    print("\n");
    return v;
}

include "lib/def.kc"
include "lib/util.kc"
include "lib/fs.kc"
include "lib/malloc.kc"
include "lib/map.kc"
include "lib/vec.kc"
include "compiler/compiler.kc"