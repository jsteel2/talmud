global ans;

function eve(compiler)
(vec{VEC}, x)
{
    print("
i i i i i i i      mmmmmmm   mm   m      m    m m    m mmmm  
I I I I I I I         #      ##   #      ##  ## #    # #   \"m
I  \\ `+' /  I         #     #  #  #      # ## # #    # #    #
 \\  `-+-'  /          #     #mm#  #      # \"\" # #    # #    #
  `-__|__-'           #    #    # #mmmmm #    # \"mmmm\" #mmm\" 
      |
------+------

Welcome to TalmudOS (Formerly ChucksOS)
");

    vec_init(vec, 64, 1);
    # NEXT, we have to implement Switch!
    while (TRUE)
    {
        print("> ");
        switch (str2int(input(vec, 10, NULL)))
        {
            case 0: print("Zero!\n"); break;
            case 2: print("Two!\n"); break;
            case 1: print("One!\n"); break;
            case 6: print("Six!\n"); break;
            case 4: print("Four!\n"); break;
            case 3: print("Three!\n"); break;
            case 5: print("Five!\n"); break;
            case 7: print("Seven!\n"); break;
            case 8: print("Eight!\n"); break;
            case 9: print("Nine!\n"); break;
            default: print("Uhhh, i dunno..\n");
        }
    }
    return;
    while (TRUE)
    {
        print("> ");
        input(vec);
        x = compile(compiler, "stdin", vec);
        if (x)
        {
            ans = x();
            format(print, "ans=%d (%x)\n", ans, ans);
        }
    }
}

function input(v)
(eax, unused)
{
    v.[VEC_LEN] = 0;

    do {
        eax = 0;
        interrupt(0x16, &eax, &unused, &unused, &unused, &unused, &unused);
        format(print, "%c", eax & 0xff);
        vec_push1(v, eax);
    } while ((eax & 0xff) != '\r');

    print("\n");
    return v;
}

include "lib/def.kc"
include "lib/util.kc"
include "lib/fs.kc"
include "lib/malloc.kc"
include "lib/map.kc"
include "lib/vec.kc"
include "compiler/compiler.kc"