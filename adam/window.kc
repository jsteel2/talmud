struct WINDOW = VEC{WINDOW_KEY_EVENTS}, VEC{WINDOW_MOUSE_EVENTS}, [WINDOW_TASK], [WINDOW_X], [WINDOW_Y], [WINDOW_W], [WINDOW_H], [WINDOW_PRINT_X], [WINDOW_PRINT_Y], [WINDOW_BELOW], [WINDOW_ABOVE], [WINDOW_BUFFER], {WINDOW_FLAGS};
const WINDOW_FGET_KEY_EVENTS = 1;
const WINDOW_FGET_MOUSE_EVENTS = 2;
const TITLEBAR_SIZE = 16;
const TITLEBAR_COLOR = 0xFABA62;

function create_window(x, y, w, h)
(win)
{
    win = malloc(WINDOW);
    vec_init(&win{WINDOW_KEY_EVENTS}, 32, 2);
    vec_init(&win{WINDOW_MOUSE_EVENTS}, 32, MOUSE_EVENT);
    win.[WINDOW_TASK] = task;
    win.[WINDOW_X] = x;
    win.[WINDOW_Y] = y;
    win.[WINDOW_W] = w;
    win.[WINDOW_H] = h;
    win.[WINDOW_PRINT_X] = 0;
    win.[WINDOW_PRINT_Y] = 0;
    win.[WINDOW_ABOVE] = NULL;
    win{WINDOW_FLAGS} = 0;
    win.[WINDOW_BUFFER] = malloc(w *! (h + TITLEBAR_SIZE) *! 4);
    win.[WINDOW_BELOW] = windows;
    if (windows) windows.[WINDOW_ABOVE] = win;
    windows = task.[TASK_WINDOW] = win;
    window_set_titlebar(win, &task{TASK_NAME});
    window_fill_rect(win, 0, 0, win.[WINDOW_W], win.[WINDOW_H], 0xFFFFFF);
    return win;
}

function delete_window(w)
{
    if (mouse_captured == w) mouse_captured = NULL;
    if (windows == w)
    {
        windows = windows.[WINDOW_BELOW];
    }
    if (w.[WINDOW_ABOVE]) w.[WINDOW_ABOVE].[WINDOW_BELOW] = w.[WINDOW_BELOW];
    if (w.[WINDOW_BELOW]) w.[WINDOW_BELOW].[WINDOW_ABOVE] = w.[WINDOW_ABOVE];
    vec_free(&w{WINDOW_KEY_EVENTS});
    vec_free(&w{WINDOW_MOUSE_EVENTS});
    free(w.[WINDOW_BUFFER]);
    framebuffer_refresh(w.[WINDOW_X], w.[WINDOW_Y], w.[WINDOW_W], w.[WINDOW_H] + TITLEBAR_SIZE, NULL);
    w.[WINDOW_TASK].[TASK_WINDOW] = NULL;
    free(w);
}

function focus_window(w)
(r)
{
    if (windows == w) return;
    w.[WINDOW_ABOVE].[WINDOW_BELOW] = w.[WINDOW_BELOW];
    if (w.[WINDOW_BELOW]) w.[WINDOW_BELOW].[WINDOW_ABOVE] = w.[WINDOW_ABOVE];
    w.[WINDOW_ABOVE] = NULL;
    w.[WINDOW_BELOW] = windows;
    windows.[WINDOW_ABOVE] = w;
    windows = w;
    framebuffer_refresh(w.[WINDOW_X], w.[WINDOW_Y], w.[WINDOW_W], w.[WINDOW_H] + TITLEBAR_SIZE, w);
}

function window_set_titlebar(win, s)
{
    window_fill_rect(win, 0, -TITLEBAR_SIZE, win.[WINDOW_W], TITLEBAR_SIZE, TITLEBAR_COLOR);
    window_draw_text(win, s, win.[WINDOW_W] /! 2 - s.[STRINGLEN] *! 4, -TITLEBAR_SIZE /$ 2 - 4, 0, TITLEBAR_COLOR);
}

function window_fill_rect(win, x, y, w, h, c)
(p, i)
{
    p = win.[WINDOW_BUFFER] + (y + TITLEBAR_SIZE) *! win.[WINDOW_W] *! 4 + x *! 4;
    i = 0;
    while (i <! h)
    {
        memsetd(p, c, w);
        i += 1;
        p += win.[WINDOW_W] *! 4;
    }
    framebuffer_refresh(win.[WINDOW_X] + x, win.[WINDOW_Y] + y + TITLEBAR_SIZE, w, h, win);
}

function window_draw_char(win, c, x, y, color, bg)
(p, i, j)
{
    p = win.[WINDOW_BUFFER] + (y + TITLEBAR_SIZE) *! win.[WINDOW_W] *! 4 + x *! 4;
    i = 0;
    while (i <! 8)
    {
        j = 0;
        while (j <! 8)
        {
            p[7 - j] = FONT{c *! 8 + i} & (1 << j) ? color : bg;
            j += 1;
        }
        i += 1;
        p += win.[WINDOW_W] *! 4;
    }
    framebuffer_refresh(win.[WINDOW_X] + x, win.[WINDOW_Y] + y + TITLEBAR_SIZE, 8, 8, win);
}

function window_draw_text(win, s, x, y, color, bg)
(i)
{
    i = 0;
    while (i <! s.[STRINGLEN])
    {
        window_draw_char(win, s.[STRINGPTR]{i}, x, y, color, bg);
        x += 8;
        i += 1;
    }
}

function window_write_rect(win, x, y, w, h, p)
(pw, i)
{
    pw = win.[WINDOW_BUFFER] + (y + TITLEBAR_SIZE) *! win.[WINDOW_W] *! 4 + x *! 4;
    i = 0;
    while (i <! h)
    {
        memcpyd(pw, p, w);
        i += 1;
        p += w *! 4;
        pw += win.[WINDOW_W] *! 4;
    }
    framebuffer_refresh(win.[WINDOW_X] + x, win.[WINDOW_Y] + y + TITLEBAR_SIZE, w, h, win);
}

function fill_rect(x, y, w, h, c) window_fill_rect(task.[TASK_WINDOW], x, y, w, h, c);
function draw_char(c, x, y, color, bg) window_draw_char(task.[TASK_WINDOW], c, x, y, color, bg);
function draw_text(s, x, y, color, bg) window_draw_text(task.[TASK_WINDOW], s, x, y, color, bg);
function write_rect(x, y, w, h, p) window_write_rect(task.[TASK_WINDOW], x, y, w, h, p);
function set_titlebar(s) window_set_titlebar(task.[TASK_WINDOW], s);

function window_print(w, s)
(i)
{
    i = 0;
    while (i <! s.[STRINGLEN])
    {
        if (s.[STRINGPTR]{i} == '\n')
        {
            w.[WINDOW_PRINT_X] = 0;
            w.[WINDOW_PRINT_Y] += 8;
        }
        else if (s.[STRINGPTR]{i} == '\b')
        {
            w.[WINDOW_PRINT_X] -= 8;
            if (w.[WINDOW_PRINT_X] <$ 0) w.[WINDOW_PRINT_X] = 0;
        }
        else if (s.[STRINGPTR]{i} == '\r')
        {
            w.[WINDOW_PRINT_X] = 0;
        }
        else
        {
            if (w.[WINDOW_PRINT_Y] + 8 >! w.[WINDOW_H])
            {
                memcpyd(w.[WINDOW_BUFFER] + w.[WINDOW_W] *! 4 *! TITLEBAR_SIZE, w.[WINDOW_BUFFER] + w.[WINDOW_W] *! 4 *! (TITLEBAR_SIZE + 8), (w.[WINDOW_H] - 8) *! w.[WINDOW_W]);
                memsetd(w.[WINDOW_BUFFER] + w.[WINDOW_W] *! 4 *! (TITLEBAR_SIZE + w.[WINDOW_H] - 8), 0xFFFFFF, w.[WINDOW_W] *! 8);
                framebuffer_refresh(w.[WINDOW_X], w.[WINDOW_Y] + TITLEBAR_SIZE, w.[WINDOW_W], w.[WINDOW_H], w);
                w.[WINDOW_PRINT_X] = 0;
                w.[WINDOW_PRINT_Y] -= 8;
            }
            window_draw_char(w, s.[STRINGPTR]{i}, w.[WINDOW_PRINT_X], w.[WINDOW_PRINT_Y], 0x000000, 0xFFFFFF);
            w.[WINDOW_PRINT_X] += 8;
            if (w.[WINDOW_PRINT_X] + 8 >! w.[WINDOW_W])
            {
                w.[WINDOW_PRINT_X] = 0;
                w.[WINDOW_PRINT_Y] += 8;
            }
        }
        i += 1;
    }
}

function print(s) return window_print(task.[TASK_WINDOW] or ADAM.[TASK_WINDOW], s);

function input(vec)
(c)
{
    c = 0;
    while (TRUE)
    {
.l:
        if (task.[TASK_WINDOW].[WINDOW_KEY_EVENTS + VEC_LEN] == 0)
        {
            wait();
        }
        else
        {
            if (!vec_shift(&task.[TASK_WINDOW]{WINDOW_KEY_EVENTS}, &c)) break;
            if (c & K_RELEASED or c == K_LSHIFT or c == K_RSHIFT or c == K_LCTRL or c == K_LALT) JMP .l
            c = shift_pressed ? qwerty_upper{c} : qwerty{c};
            if (c == '\b')
            {
                if (vec.[VEC_LEN] != 0)
                {
                    vec.[VEC_LEN] -= 1;
                    print("\b \b");
                }
                JMP .l
            }
            format(print, "%c", c);
            if (c == '\n') break;
            vec_push1(vec, c);
        }
    }
    return vec;
}

function capture_mouse()
{
    mouse_captured = task.[TASK_WINDOW];
}

function release_mouse()
{
    mouse_captured = NULL;
    draw_cursor();
}