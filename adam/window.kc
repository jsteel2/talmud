struct WINDOW = VEC{WINDOW_KEY_EVENTS}, VEC{WINDOW_MOUSE_EVENTS}, [WINDOW_TASK], [WINDOW_X], [WINDOW_Y], [WINDOW_W], [WINDOW_H], [WINDOW_PRINT_X], [WINDOW_PRINT_Y], [WINDOW_PRINT_CURSOR], [WINDOW_PRINT_SCROLLTOP], [WINDOW_PRINT_EDITABLE_START], VEC{WINDOW_PRINT_BUFFER}, [WINDOW_BELOW], [WINDOW_ABOVE], [WINDOW_BUFFER], {WINDOW_FLAGS};
const WINDOW_FGET_KEY_EVENTS = 1;
const WINDOW_FGET_MOUSE_EVENTS = 2;
const WINDOW_FPRINT_SCROLL = 4;
const TITLEBAR_SIZE = 16;
const TITLEBAR_COLOR = 0xFABA62;

function create_window(x, y, w, h)
(win)
{
    win = malloc(WINDOW);
    vec_init(&win{WINDOW_KEY_EVENTS}, 32, 2);
    vec_init(&win{WINDOW_MOUSE_EVENTS}, 32, MOUSE_EVENT);
    vec_init(&win{WINDOW_PRINT_BUFFER}, 128, 1);
    win.[WINDOW_TASK] = task;
    win.[WINDOW_X] = x;
    win.[WINDOW_Y] = y;
    win.[WINDOW_W] = w;
    win.[WINDOW_H] = h;
    win.[WINDOW_PRINT_X] = 0;
    win.[WINDOW_PRINT_Y] = 0;
    win.[WINDOW_PRINT_CURSOR] = 0;
    win.[WINDOW_PRINT_SCROLLTOP] = 0;
    win.[WINDOW_PRINT_EDITABLE_START] = 0;
    win.[WINDOW_ABOVE] = NULL;
    win{WINDOW_FLAGS} = WINDOW_FPRINT_SCROLL;
    win.[WINDOW_BUFFER] = malloc(w *! (h + TITLEBAR_SIZE) *! 4);
    win.[WINDOW_BELOW] = windows;
    if (windows) windows.[WINDOW_ABOVE] = win;
    windows = task.[TASK_WINDOW] = win;
    window_draw_titlebar(win);
    window_fill_rect(win, 0, 0, win.[WINDOW_W], win.[WINDOW_H], 0xFFFFFF);
    return win;
}

function delete_window(w)
{
    if (mouse_captured == w) mouse_captured = NULL;
    if (windows == w)
    {
        windows = windows.[WINDOW_BELOW];
    }
    if (w.[WINDOW_ABOVE]) w.[WINDOW_ABOVE].[WINDOW_BELOW] = w.[WINDOW_BELOW];
    if (w.[WINDOW_BELOW]) w.[WINDOW_BELOW].[WINDOW_ABOVE] = w.[WINDOW_ABOVE];
    vec_free(&w{WINDOW_KEY_EVENTS});
    vec_free(&w{WINDOW_MOUSE_EVENTS});
    vec_free(&w{WINDOW_PRINT_BUFFER});
    free(w.[WINDOW_BUFFER]);
    framebuffer_refresh(w.[WINDOW_X], w.[WINDOW_Y], w.[WINDOW_W], w.[WINDOW_H] + TITLEBAR_SIZE, NULL);
    w.[WINDOW_TASK].[TASK_WINDOW] = NULL;
    free(w);
}

function focus_window(w)
(r)
{
    if (windows == w) return;
    w.[WINDOW_ABOVE].[WINDOW_BELOW] = w.[WINDOW_BELOW];
    if (w.[WINDOW_BELOW]) w.[WINDOW_BELOW].[WINDOW_ABOVE] = w.[WINDOW_ABOVE];
    w.[WINDOW_ABOVE] = NULL;
    w.[WINDOW_BELOW] = windows;
    windows.[WINDOW_ABOVE] = w;
    windows.[WINDOW_TASK].[TASK_WAIT] = FALSE;
    w.[WINDOW_TASK].[TASK_WAIT] = FALSE;
    windows = w;
    framebuffer_refresh(w.[WINDOW_X], w.[WINDOW_Y], w.[WINDOW_W], w.[WINDOW_H] + TITLEBAR_SIZE, w);
    release_mouse();
}

function window_draw_titlebar(win)
(s{STRING}, w)
{
    w = win.[WINDOW_W] - 16;
    s.[STRINGPTR] = win.[WINDOW_TASK].[TASK_NAME + STRINGPTR];
    s.[STRINGLEN] = minu(win.[WINDOW_TASK].[TASK_NAME + STRINGLEN], maxs(0, w /! 8 - 2));
    window_fill_rect(win, 0, -TITLEBAR_SIZE, win.[WINDOW_W], TITLEBAR_SIZE, TITLEBAR_COLOR);
    window_draw_text(win, s, win.[WINDOW_W] /! 2 - s.[STRINGLEN] *! 4, -TITLEBAR_SIZE /$ 2 - 4, 0, TITLEBAR_COLOR);
    if (cursor_y <$ win.[WINDOW_Y] + TITLEBAR_SIZE and cursor_x >=$ win.[WINDOW_X] + w and cursor_y >=$ win.[WINDOW_Y] and cursor_x <$ win.[WINDOW_X] + win.[WINDOW_W])
    {
        window_fill_rect(win, w, -TITLEBAR_SIZE, 16, TITLEBAR_SIZE, 0xFF0000);
        window_draw_char(win, 'X', w + 4, -TITLEBAR_SIZE /$ 2 - 4, 0xFFFFFF, 0xFF0000);
    }
    else
    {
        window_draw_char(win, 'X', w + 4, -TITLEBAR_SIZE /$ 2 - 4, 0, TITLEBAR_COLOR);
    }
}

function window_fill_rect(win, x, y, w, h, c)
(p, i)
{
    p = win.[WINDOW_BUFFER] + (y + TITLEBAR_SIZE) *! win.[WINDOW_W] *! 4 + x *! 4;
    i = 0;
    while (i <! h)
    {
        memsetd(p, c, w);
        i += 1;
        p += win.[WINDOW_W] *! 4;
    }
    framebuffer_refresh(win.[WINDOW_X] + x, win.[WINDOW_Y] + y + TITLEBAR_SIZE, w, h, win);
}

function window_draw_char(win, c, x, y, color, bg)
(p, i, j)
{
    p = win.[WINDOW_BUFFER] + (y + TITLEBAR_SIZE) *! win.[WINDOW_W] *! 4 + x *! 4;
    i = 0;
    while (i <! 8)
    {
        j = 0;
        while (j <! 8)
        {
            p[7 - j] = FONT{c *! 8 + i} & (1 << j) ? color : bg;
            j += 1;
        }
        i += 1;
        p += win.[WINDOW_W] *! 4;
    }
    framebuffer_refresh(win.[WINDOW_X] + x, win.[WINDOW_Y] + y + TITLEBAR_SIZE, 8, 8, win);
}

function window_draw_text(win, s, x, y, color, bg)
(i)
{
    i = 0;
    while (i <! s.[STRINGLEN])
    {
        if (y + 8 >$ win.[WINDOW_H]) return;
        if (x + 8 >! win.[WINDOW_W])
        {
            x = 0;
            y += 8;
        }
        if (s.[STRINGPTR]{i} == '\n')
        {
            window_fill_rect(win, x, y, win.[WINDOW_W] - x, 8, 0xFFFFFF);
            x = 0;
            y += 8;
            JMP .l
        }
        if (y + 8 >$ win.[WINDOW_H]) return;
        window_draw_char(win, s.[STRINGPTR]{i}, x, y, color, bg);
        x += 8;
.l:
        i += 1;
    }
}

function window_write_rect(win, x, y, w, h, p)
(pw, i)
{
    pw = win.[WINDOW_BUFFER] + (y + TITLEBAR_SIZE) *! win.[WINDOW_W] *! 4 + x *! 4;
    i = 0;
    while (i <! h)
    {
        memcpyd(pw, p, w);
        i += 1;
        p += w *! 4;
        pw += win.[WINDOW_W] *! 4;
    }
    framebuffer_refresh(win.[WINDOW_X] + x, win.[WINDOW_Y] + y + TITLEBAR_SIZE, w, h, win);
}

function fill_rect(x, y, w, h, c) window_fill_rect(task.[TASK_WINDOW], x, y, w, h, c);
function draw_char(c, x, y, color, bg) window_draw_char(task.[TASK_WINDOW], c, x, y, color, bg);
function draw_text(s, x, y, color, bg) window_draw_text(task.[TASK_WINDOW], s, x, y, color, bg);
function write_rect(x, y, w, h, p) window_write_rect(task.[TASK_WINDOW], x, y, w, h, p);
function draw_titlebar() window_draw_titlebar(task.[TASK_WINDOW]);

function window_print_redraw(w)
(s{STRING}, p)
{
    window_fill_rect(w, 0, 0, w.[WINDOW_W], w.[WINDOW_H], 0xFFFFFF);
    s.[STRINGPTR] = &w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_SCROLLTOP]};
    s.[STRINGLEN] = w.[WINDOW_PRINT_BUFFER + VEC_LEN] - w.[WINDOW_PRINT_SCROLLTOP];
    window_draw_text(w, s, 0, 0, 0, 0xFFFFFF);
}

function window_print_scrollback(w)
{
    if (w.[WINDOW_PRINT_Y] >=$ 0 and w.[WINDOW_PRINT_Y] + 8 <=$ w.[WINDOW_H]) return;
    (w.[WINDOW_PRINT_Y] >$ 0 ? window_print_scroll_down : window_print_scroll_up)(w, (w.[WINDOW_PRINT_Y] + 8 - w.[WINDOW_H]) /! 8);
}

function window_print_buffer(w)
(s{STRING})
{
    s.[STRINGPTR] = &w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR]};
    s.[STRINGLEN] = w.[WINDOW_PRINT_BUFFER + VEC_LEN] - w.[WINDOW_PRINT_CURSOR];
    window_draw_text(w, s, w.[WINDOW_PRINT_X], w.[WINDOW_PRINT_Y], 0, 0xFFFFFF);
}

function window_print(w, s)
(i, x)
{
    window_print_scrollback(w);
    i = 0;
    while (i <! s.[STRINGLEN])
    {
        if (s.[STRINGPTR]{i} == '\n')
        {
            if (w.[WINDOW_PRINT_CURSOR] != w.[WINDOW_PRINT_BUFFER + VEC_LEN]) window_fill_rect(w, w.[WINDOW_PRINT_X], w.[WINDOW_PRINT_Y], w.[WINDOW_W] - w.[WINDOW_PRINT_X], 8, 0xFFFFFF);
            w.[WINDOW_PRINT_X] = 0;
            w.[WINDOW_PRINT_Y] += 8;
            if (w.[WINDOW_PRINT_Y] + 8 >$ w.[WINDOW_H]) window_print_scroll_down(w, 1);
            vec_insert1(&w{WINDOW_PRINT_BUFFER}, w.[WINDOW_PRINT_CURSOR], '\n');
            w.[WINDOW_PRINT_CURSOR] += 1;
            window_print_buffer(w);
        }
        else if (s.[STRINGPTR]{i} == '\t')
        {
            window_print(w, "    ");
        }
        else if (s.[STRINGPTR]{i} == '\b')
        {
            if (w.[WINDOW_PRINT_CURSOR] <=! w.[WINDOW_PRINT_EDITABLE_START]) JMP .l
            if (w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR] - 1} == '\n')
            {
                w.[WINDOW_PRINT_CURSOR] -= 1;
                w.[WINDOW_PRINT_Y] -= 8;
                x = w.[WINDOW_PRINT_CURSOR];
                while (x and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{x - 1} != '\n') x -= 1;
                w.[WINDOW_PRINT_X] = (w.[WINDOW_PRINT_CURSOR] - x) %! (w.[WINDOW_W] /! 8) *! 8;
                if (w.[WINDOW_PRINT_Y] <$ 0) window_print_scroll_up(w, 1);
            }
            else
            {
                window_print_cursor_left(w);
            }
            vec_remove(&w{WINDOW_PRINT_BUFFER}, NULL, w.[WINDOW_PRINT_CURSOR]);
            vec_push1(&w{WINDOW_PRINT_BUFFER}, '\n');
            vec_push1(&w{WINDOW_PRINT_BUFFER}, '\n');
            window_print_buffer(w);
            w.[WINDOW_PRINT_BUFFER + VEC_LEN] -= 2;
        }
        else
        {
            vec_insert1(&w{WINDOW_PRINT_BUFFER}, w.[WINDOW_PRINT_CURSOR], s.[STRINGPTR]{i});
            window_print_buffer(w);
            window_print_cursor_right(w);
        }
.l:
        i += 1;
    }
}

function print(s) window_print(task.[TASK_WINDOW] or ADAM.[TASK_WINDOW], s);
function adam_print(s) window_print(ADAM.[TASK_WINDOW], s);

function window_print_scroll_down(w, rows)
(i, o)
{
    while (rows)
    {
        o = w.[WINDOW_PRINT_SCROLLTOP];
        i = 0;
        while (i <! w.[WINDOW_W] and w.[WINDOW_PRINT_SCROLLTOP] <! w.[WINDOW_PRINT_BUFFER + VEC_LEN] and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_SCROLLTOP]} != '\n')
        {
            i += 8;
            w.[WINDOW_PRINT_SCROLLTOP] += 1;
        }
        if (i <! w.[WINDOW_W] and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_SCROLLTOP]} == '\n') w.[WINDOW_PRINT_SCROLLTOP] += 1;
        if (w.[WINDOW_PRINT_SCROLLTOP] >=! w.[WINDOW_PRINT_BUFFER + VEC_LEN])
        {
            w.[WINDOW_PRINT_SCROLLTOP] = o;
            break;
        }
        w.[WINDOW_PRINT_Y] -= 8;
        rows -= 1;
    }
    window_print_redraw(w);
}

function window_print_scroll_up(w, rows)
(i, x)
{
    while (rows)
    {
        if (!w.[WINDOW_PRINT_SCROLLTOP]) break;
        i = 0;
        while (i <! w.[WINDOW_W] and w.[WINDOW_PRINT_SCROLLTOP] and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_SCROLLTOP] - 1} != '\n')
        {
            i += 8;
            w.[WINDOW_PRINT_SCROLLTOP] -= 1;
        }
        if (i >=! w.[WINDOW_W] or !w.[WINDOW_PRINT_SCROLLTOP]) JMP .l
        i = w.[WINDOW_PRINT_SCROLLTOP];
        if (w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_SCROLLTOP] - 1} == '\n') w.[WINDOW_PRINT_SCROLLTOP] -= 1;
        x = w.[WINDOW_PRINT_SCROLLTOP];
        while (x >$ 0 and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{x - 1} != '\n') x -= 1;
        if (x <$ 0)
        {
            w.[WINDOW_PRINT_SCROLLTOP] = i;
            break;
        }
        w.[WINDOW_PRINT_SCROLLTOP] -= (w.[WINDOW_PRINT_SCROLLTOP] - x) %! (w.[WINDOW_W] /! 8);
.l:
        w.[WINDOW_PRINT_Y] += 8;
        rows -= 1;
    }
    window_print_redraw(w);
}

function window_print_cursor_left(w)
{
    window_print_scrollback(w);
    if (w.[WINDOW_PRINT_CURSOR] <=! w.[WINDOW_PRINT_EDITABLE_START] or w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR] - 1} == '\n') return;
    w.[WINDOW_PRINT_CURSOR] -= 1;
    w.[WINDOW_PRINT_X] -= 8;
    if (w.[WINDOW_PRINT_X] <$ 0)
    {
        w.[WINDOW_PRINT_Y] -= 8;
        w.[WINDOW_PRINT_X] = w.[WINDOW_W] - 8;
        if (w.[WINDOW_PRINT_Y] <$ 0) window_print_scroll_up(w, 1);
    }
}

function window_print_cursor_right(w)
{
    window_print_scrollback(w);
    if (w.[WINDOW_PRINT_CURSOR] == w.[WINDOW_PRINT_BUFFER + VEC_LEN] or w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR]} == '\n') return;
    w.[WINDOW_PRINT_X] += 8;
    w.[WINDOW_PRINT_CURSOR] += 1;
    if (w.[WINDOW_PRINT_X] >=$ w.[WINDOW_W])
    {
        w.[WINDOW_PRINT_X] = 0;
        w.[WINDOW_PRINT_Y] += 8;
        if (w.[WINDOW_PRINT_Y] + 8 >$ w.[WINDOW_H]) window_print_scroll_down(w, 1);
    }
}

function window_print_cursor_down(w)
{
    window_print_scrollback(w);
    while (w.[WINDOW_PRINT_CURSOR] <! w.[WINDOW_PRINT_BUFFER + VEC_LEN] and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR]} != '\n')
    {
        w.[WINDOW_PRINT_CURSOR] += 1;
        w.[WINDOW_PRINT_X] += 8;
        if (w.[WINDOW_PRINT_X] >=! w.[WINDOW_W])
        {
            w.[WINDOW_PRINT_X] = 0;
            w.[WINDOW_PRINT_Y] += 8;
        }
    }
    if (w.[WINDOW_PRINT_CURSOR] == w.[WINDOW_PRINT_BUFFER + VEC_LEN]) return;
    if (w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR]} == '\n')
    {
        w.[WINDOW_PRINT_CURSOR] += 1;
        w.[WINDOW_PRINT_Y] += 8;
        w.[WINDOW_PRINT_X] = 0;
    }
    if (w.[WINDOW_PRINT_Y] + 8 >$ w.[WINDOW_H]) window_print_scroll_down(w, (w.[WINDOW_PRINT_Y] + 8 - w.[WINDOW_H]) /! 8);
}

function window_print_cursor_up(w)
(i, x)
{
    window_print_scrollback(w);
    if (w.[WINDOW_PRINT_CURSOR] <=! w.[WINDOW_PRINT_EDITABLE_START]) return;
    i = w.[WINDOW_PRINT_X];
    do
    {
        w.[WINDOW_PRINT_CURSOR] -= 1;
        if (i <$ 0)
        {
            i = w.[WINDOW_W];
            w.[WINDOW_PRINT_Y] -= 8;
        }
        i -= 8;
    } while (w.[WINDOW_PRINT_CURSOR] >! w.[WINDOW_PRINT_EDITABLE_START] and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR]} != '\n')
    if (w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR]} == '\n') 
    {
        w.[WINDOW_PRINT_Y] -= 8;
        w.[WINDOW_PRINT_X] = 0;
    }
    i = 0;
    while (w.[WINDOW_PRINT_CURSOR] >! w.[WINDOW_PRINT_EDITABLE_START] and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR] - 1} != '\n')
    {
        w.[WINDOW_PRINT_CURSOR] -= 1;
        i += 8;
        if (i >=! w.[WINDOW_W])
        {
            i = 0;
            w.[WINDOW_PRINT_Y] -= 8;
        }
    }
    w.[WINDOW_PRINT_X] = 0;
    if (w.[WINDOW_PRINT_CURSOR] == w.[WINDOW_PRINT_EDITABLE_START])
    {
        x = w.[WINDOW_PRINT_CURSOR];
        while (x and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{x - 1} != '\n')
        {
            x -= 1;
            i += 8;
            if (i >=! w.[WINDOW_W])
            {
                i = 0;
                w.[WINDOW_PRINT_Y] -= 8;
            }
        }
        w.[WINDOW_PRINT_X] = (w.[WINDOW_PRINT_CURSOR] - x) *! 8;
    }
    if (w.[WINDOW_PRINT_Y] <$ 0) window_print_scroll_up(w, -w.[WINDOW_PRINT_Y] /! 8);
}

function print_scroll_down(rows) window_print_scroll_down(task.[TASK_WINDOW], rows);
function print_scroll_up(rows) window_print_scroll_up(task.[TASK_WINDOW], rows);
function print_cursor_left() window_print_cursor_left(task.[TASK_WINDOW]);
function print_cursor_right() window_print_cursor_right(task.[TASK_WINDOW]);
function print_cursor_down() window_print_cursor_down(task.[TASK_WINDOW]);
function print_cursor_up() window_print_cursor_up(task.[TASK_WINDOW]);

function input(s, editable_start, multiline)
(c, bf, be, w)
{
    w = task.[TASK_WINDOW];
    if (!w) return;
    bf = w{WINDOW_FLAGS};
    w{WINDOW_FLAGS} |= WINDOW_FGET_KEY_EVENTS;
    be = w.[WINDOW_PRINT_EDITABLE_START];
    w.[WINDOW_PRINT_EDITABLE_START] = editable_start;
    c = 0;
    while (TRUE)
    {
.l:
        if (w.[WINDOW_KEY_EVENTS + VEC_LEN] == 0)
        {
            if (windows == w and w.[WINDOW_PRINT_Y] >=$ 0 and w.[WINDOW_PRINT_Y] + 8 <=$ w.[WINDOW_H])
            {
                fill_rect(w.[WINDOW_PRINT_X], w.[WINDOW_PRINT_Y], 1, 8, 0xFF);
                wait();
                if (w.[WINDOW_PRINT_Y] <$ 0 or w.[WINDOW_PRINT_Y] + 8 >$ w.[WINDOW_H]) JMP .l
                if (w.[WINDOW_PRINT_CURSOR] != w.[WINDOW_PRINT_BUFFER + VEC_LEN] and w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR]} != '\n') draw_char(w.[WINDOW_PRINT_BUFFER + VEC_PTR]{w.[WINDOW_PRINT_CURSOR]}, w.[WINDOW_PRINT_X], w.[WINDOW_PRINT_Y], 0, 0xFFFFFF);
                else fill_rect(w.[WINDOW_PRINT_X], w.[WINDOW_PRINT_Y], 1, 8, 0xFFFFFF);
            }
            else
            {
                wait();
            }
        }
        else
        {
            if (!vec_shift(&w{WINDOW_KEY_EVENTS}, &c)) break;
            if (c & K_RELEASED) JMP .l
            if (c == K_LEFT)
            {
                print_cursor_left();
                JMP .l
            }
            else if (c == K_RIGHT)
            {
                print_cursor_right();
                JMP .l
            }
            else if (c == K_DOWN)
            {
                print_cursor_down();
                JMP .l
            }
            else if (c == K_UP)
            {
                print_cursor_up();
                JMP .l
            }
            else if (c == K_ESC)
            {
                break;
            }
            else if (c >=! QWERTY_SIZE) JMP .l
            c = shift_pressed ? qwerty_upper{c} : qwerty{c};
            if (!c) JMP .l
            format(print, "%c", c);
            if (c == '\n' and (!multiline or w.[WINDOW_PRINT_CURSOR] == w.[WINDOW_PRINT_BUFFER + VEC_LEN])) break;
        }
    }
    w{WINDOW_FLAGS} = bf;
    w.[WINDOW_PRINT_EDITABLE_START] = be;
    s.[STRINGLEN] = w.[WINDOW_PRINT_BUFFER + VEC_LEN] - editable_start - (!multiline and c == '\n' ? 1 : 0);
    s.[STRINGPTR] = &w.[WINDOW_PRINT_BUFFER + VEC_PTR]{editable_start};
    return c != K_ESC and s;
}

function inputline(s) return input(s, task.[TASK_WINDOW].[WINDOW_PRINT_BUFFER + VEC_LEN], FALSE);

function capture_mouse()
{
    mouse_captured = task.[TASK_WINDOW];
}

function release_mouse()
{
    mouse_captured = NULL;
    draw_cursor();
}