import "/lib/disk.kc"
import "/lib/util.kc"

struct FILES = FILE_DRIVE, FILE_PARTITION, FILE_DATA_SECTOR, FILE_SECTORS_PER_CLUSTER, FILE_CLUSTER_START, FILE_LBA_CUR, FILE_ATTR_LBA, FILE_ATTR_OFF, FILE_CLUSTER_CUR, FILE_FAT_SECTOR, FILE_DIR_OFF, FILE_SEEK, FILE_SIZE;
const FILEDATA = FILES *! 2;
const FILEDATASIZE = 512;
const FILE = FILEDATASIZE + FILES *! 2;

const FAT_BYTES_PER_SECTOR = FILEDATA + 0x0B;
const FAT_SECTORS_PER_CLUSTER = FILEDATA + 0x0D;
const FAT_RESERVED_SECTORS = FILEDATA + 0x0E;
const FAT_FATS = FILEDATA + 0x10;
const FAT_ROOT_ENTRIES = FILEDATA + 0x11;
const FAT_SECTORS_PER_FAT = FILEDATA + 0x16;
const FAT_HIDDEN_SECTORS = FILEDATA + 0x1C;

const FAT_DIR_CLUSTER = FILEDATA + 26;
const FAT_DIR_ATTR = FILEDATA + 11;
const FAT_DIR_SIZE = FILEDATA + 28;

function exec(file, argc, argv, cwdpat)
(old, seg, nargv, sp, i, ncwdpat, bb)
{
    MOV AX, DS
    MOV [seg], AX
    MOV [old], AX
    seg = seg + 0x1000;
    if (read(file, -2, 0, seg) = -1) return 0;
    MOV DI, [argc]
    SHL DI, 1
    SHL DI, 1
    NEG DI
    MOV [nargv], DI
    sp = nargv;
    i = argc;
    while (i)
    {
        i = i - 1;
        sp = sp - argv[i *! STRING + STRINGLEN];
        memcpy(sp, argv[i *! STRING + STRINGPTR], argv[i *! STRING + STRINGLEN], seg);
        argv[i *! STRING + STRINGPTR] = sp;
    }
    memcpy(nargv, argv, argc *! 4, seg);
    ncwdpat = sp - cwdpat[STRINGLEN] - STRING *! 2;
    bb = cwdpat[STRINGPTR];
    cwdpat[STRINGPTR] = sp - cwdpat[STRINGLEN];
    sp = ncwdpat;
    memcpy(ncwdpat, cwdpat, STRING *! 2, seg);
    cwdpat[STRINGPTR] = bb;
    memcpy(ncwdpat + STRING *! 2, cwdpat[STRINGPTR], cwdpat[STRINGLEN], seg);
    MOV SI, [argc]
    MOV DI, [nargv]
    MOV AX, [ncwdpat]
    MOV BX, BP
    MOV CX, [old]
    MOV DX, [seg]
    MOV ES, DX
    MOV DS, DX
    CLI
    MOV SP, [sp]
    MOV SS, DX
    STI
    PUSH ES
    MOV DX, 0
    PUSH DX
    MOV BP, SP
    PUSH BX
    PUSH CX
    CALL FAR [BP]
    POP CX
    POP BX
    POP DX
    POP DX
    MOV DS, CX
    MOV ES, CX
    CLI
    MOV SS, CX
    MOV SP, BX
    STI
    MOV BP, BX
    return 1;
}

function delete(file)
(clus, p)
{
    if (!sector_read(file[FILE_DRIVE], file[FILE_ATTR_LBA], 1, file + FILEDATA)) return 0;
    file{FILEDATA + file[FILE_ATTR_OFF]} = 0xE5;
    if (!sector_write(file[FILE_DRIVE], file[FILE_ATTR_LBA], 1, file + FILEDATA)) return 0;

    clus = file[FILE_CLUSTER_START];
    while (clus <! 0xFFF8)
    {
        if (!sector_read(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (clus *! 2 /! 512), 1, file + FILEDATA)) return -1;
        p = file + FILEDATA + clus *! 2 %! 512;
        clus = *p;
        *p = 0;
        if (!sector_write(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (clus *! 2 /! 512), 1, file + FILEDATA)) return -1;
    }

    return 1;
}

function read(file, n, buf, seg)
(i, x)
{
    i = 0;
    # rename fILE_DIR_OFF to something more general and fitting
    if (file[FILE_DIR_OFF] <$ 0) file[FILE_DIR_OFF] = 0;
    n = minu(n, file[FILE_SIZE]);
    while (n and file[FILE_SEEK] <! file[FILE_SIZE])
    {
        if (file[FILE_DIR_OFF] >=! FILEDATASIZE)
        {
            file[FILE_DIR_OFF] = 0;
            file[FILE_LBA_CUR] = file[FILE_LBA_CUR] + 1;
            if (!sector_read(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, file + FILEDATA)) return -1;
        }
        x = minu(minu(n, file[FILE_SIZE] - file[FILE_SEEK]), FILEDATASIZE - file[FILE_DIR_OFF]);
        memcpy(buf + i, file + FILEDATA + file[FILE_DIR_OFF], x, seg);
        i = i + x;
        n = minu(n - x, file[FILE_SIZE] - file[FILE_SEEK]);
        file[FILE_SEEK] = file[FILE_SEEK] + x;
        file[FILE_DIR_OFF] = file[FILE_DIR_OFF] + x;
        if (file[FILE_SEEK] %! (file[FILE_SECTORS_PER_CLUSTER] *! 512) = 0)
        {
            if (!sector_read(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (file[FILE_CLUSTER_CUR] *! 2 /! 512), 1, file + FILEDATA)) return -1;
            file[FILE_CLUSTER_CUR] = *(file + FILEDATA + file[FILE_CLUSTER_CUR] *! 2 %! 512);
            file[FILE_DIR_OFF] = 0;
            file[FILE_LBA_CUR] = ((file[FILE_CLUSTER_CUR] - 2) *! file[FILE_SECTORS_PER_CLUSTER]) + file[FILE_DATA_SECTOR];
            if (file[FILE_CLUSTER_CUR] >=! 0xFFF8) return i;
            if (!sector_read(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, file + FILEDATA)) return -1;
        }
    }
    return i;
}

function write(file, n, buf)
(x, i, y)
{
    i = 0;
    if (file[FILE_DIR_OFF] <$ 0) file[FILE_DIR_OFF] = 0;
    while (n)
    {
        if (file[FILE_DIR_OFF] >=! FILEDATASIZE)
        {
            file[FILE_DIR_OFF] = 0;
            file[FILE_LBA_CUR] = file[FILE_LBA_CUR] + 1;
        }

        x = minu(512, n);

        if (x = 512 and file[FILE_DIR_OFF] = 0)
        {
            if (!sector_write(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, buf + i)) return -1;
        }
        else
        {
            x = minu(x, 512 - file[FILE_DIR_OFF]);
            if (!sector_read(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, file + FILEDATA)) return -1;
            memcpy(file + FILEDATA + file[FILE_DIR_OFF], buf + i, x, -1);
            if (!sector_write(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, file + FILEDATA)) return -1;
        }

        i = i + x;
        file[FILE_SEEK] = file[FILE_SEEK] + x;
        file[FILE_DIR_OFF] = file[FILE_DIR_OFF] + x;
        n = n - x;
        if (file[FILE_SEEK] %! (file[FILE_SECTORS_PER_CLUSTER] *! 512) = 0)
        {
            if (!sector_read(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (file[FILE_CLUSTER_CUR] *! 2 /! 512), 1, file + FILEDATA)) return -1;
            x = file + FILEDATA + file[FILE_CLUSTER_CUR] *! 2 %! 512;
            if (*x >=! 0xFFF8)
            {
                *x = find_free_cluster(file);
                if (!sector_write(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (file[FILE_CLUSTER_CUR] *! 2 /! 512), 1, file + FILEDATA)) return -1;
                if (!sector_read(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (*x *! 2 /! 512), 1, file + FILEDATA)) return -1;
                y = file + FILEDATA + *x *! 2 %! 512;
                *y = 0xFFF8;
                if (!sector_write(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (*x *! 2 /! 512), 1, file + FILEDATA)) return -1;
            }
            file[FILE_CLUSTER_CUR] = *x;
            file[FILE_DIR_OFF] = 0;
            file[FILE_LBA_CUR] = ((file[FILE_CLUSTER_CUR] - 2) *! file[FILE_SECTORS_PER_CLUSTER]) + file[FILE_DATA_SECTOR];
        }
    }
    file[FILE_SIZE] = maxu(file[FILE_SIZE], file[FILE_SEEK]);
    if (!sector_read(file[FILE_DRIVE], file[FILE_ATTR_LBA], 1, file + FILEDATA)) return -1;
    x = file + file[FILE_ATTR_OFF] + FAT_DIR_SIZE;
    *x = file[FILE_SIZE];
    if (!sector_write(file[FILE_DRIVE], file[FILE_ATTR_LBA], 1, file + FILEDATA)) return -1;
    if (!sector_read(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, file + FILEDATA)) return -1;
    return i;
}

function seek(file, n)
(doread)
{
    if (n = file[FILE_SEEK]) return 1;
    doread = 0;
    if (n <! file[FILE_SEEK])
    {
        file[FILE_CLUSTER_CUR] = file[FILE_CLUSTER_START];
        file[FILE_SEEK] = 0;
        if (n = 0) doread = 1;
    }

    while (file[FILE_SEEK] & ~(file[FILE_SECTORS_PER_CLUSTER] *! 512 - 1) != n & ~(file[FILE_SECTORS_PER_CLUSTER] *! 512 - 1))
    {
        if (!sector_read(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (file[FILE_CLUSTER_CUR] *! 2 /! 512), 1, file + FILEDATA)) return -1;
        file[FILE_CLUSTER_CUR] = *(file + FILEDATA + file[FILE_CLUSTER_CUR] *! 2 %! 512);
        if (file[FILE_CLUSTER_CUR] >=! 0xFFF8) return 0; # should allow to go further...
        doread = 1;
    }

    file[FILE_LBA_CUR] = ((file[FILE_CLUSTER_CUR] - 2) *! file[FILE_SECTORS_PER_CLUSTER]) + file[FILE_DATA_SECTOR];
    file[FILE_DIR_OFF] = n & 511;
    if (doread or file[FILE_SEEK] & ~511 != n & ~511)
    {
        file[FILE_LBA_CUR] = file[FILE_LBA_CUR] + ((n & (file[FILE_SECTORS_PER_CLUSTER] *! 512 - 1)) - (file[FILE_SEEK] & (file[FILE_SECTORS_PER_CLUSTER] *! 512 - 1))) /$ 512;
        if (!sector_read(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, file + FILEDATA)) return 0;
    }
    file[FILE_SEEK] = n;
    return 1;
}

function find_free_cluster(file)
(buf{512}, sector, off)
{
    sector = file[FILE_FAT_SECTOR];
    off = 0;
    if (!sector_read(file[FILE_DRIVE], sector, 1, buf)) return -1;
    while (1) # stop somewhere..
    {
        if (buf[off] = 0)
        {
            return (sector - file[FILE_FAT_SECTOR]) *! 256 + off;
        }
        off = off + 1;
        if (off = 256)
        {
            off = 0;
            sector = sector + 1;
            if (!sector_read(file[FILE_DRIVE], sector, 1, buf)) return -1;
        }
    }
    return -1;
}

function dir_next(file, out)
(x)
{
.again:
    x = _dir_next(file, out);
    if (x = 2) JMP .again
    return x;
}

function _dir_next(file, out)
{
.again:
    file[FILE_DIR_OFF] = file[FILE_DIR_OFF] + 32;
    if (file[FILE_DIR_OFF] >=! FILEDATASIZE)
    {
        file[FILE_DIR_OFF] = 0;
        file[FILE_LBA_CUR] = file[FILE_LBA_CUR] + 1;
        sector_read(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, file + FILEDATA);
    }
    if (file{FILEDATA + file[FILE_DIR_OFF]} = 0) return 0;
    if (file{file[FILE_DIR_OFF] + FAT_DIR_ATTR} & 0x02) JMP .again
    if (file{FILEDATA + file[FILE_DIR_OFF]} = 0xE5) return 2;
    out[STRINGLEN] = 11;
    out[STRINGPTR] = file + FILEDATA + file[FILE_DIR_OFF];
    return 1;
}

function openat(cwd, path, file, create)
(s[STRING], d[STRING], state, old, end, drive, partition, root_read, x)
{
    file[FILE_DIR_OFF] = -32;
    state = 0;
    old = state;
    root_read = 0;
    if (cwd)
    {
        memcpy(file, cwd, FILE, -1);
    }
    drive = file[FILE_DRIVE];
    partition = file[FILE_PARTITION];
    while (strtok(path, '/', s, &state))
    {
        if (s[STRINGPTR]{0} = ':')
        {
            s[STRINGPTR] = s[STRINGPTR] + 1;
            file[FILE_DRIVE] = atoi(s, &end);
            drive = file[FILE_DRIVE];
            state = old + end + 1;
            JMP .c
        }
        if (s[STRINGPTR]{0} = ';')
        {
            s[STRINGPTR] = s[STRINGPTR] + 1;
            file[FILE_PARTITION] = atoi(s, &end);
            partition = file[FILE_PARTITION];
            state = old + end + 1;
            JMP .c
        }

        if (s[STRINGLEN] = 0 and !root_read)
        {
            sector_read(drive, 0, 1, file + FILEDATA);
            sector_read(drive, *(file + FILEDATA + 0x1BE + partition *! 16 + 8), 1, file + FILEDATA);
            file[FILE_FAT_SECTOR] = *(file + FAT_RESERVED_SECTORS) + *(file + FAT_HIDDEN_SECTORS);
            file[FILE_LBA_CUR] = *(file + FAT_RESERVED_SECTORS) + *(file + FAT_HIDDEN_SECTORS) + file{FAT_FATS} *! *(file + FAT_SECTORS_PER_FAT);
            file[FILE_CLUSTER_START] = 0;
            file[FILE_SECTORS_PER_CLUSTER] = file{FAT_SECTORS_PER_CLUSTER};
            file[FILE_DATA_SECTOR] = *(file + FAT_RESERVED_SECTORS) + *(file + FAT_HIDDEN_SECTORS) + file{FAT_FATS} *! *(file + FAT_SECTORS_PER_FAT) + ((*(file + FAT_ROOT_ENTRIES) *! 32) + (*(file + FAT_BYTES_PER_SECTOR) - 1)) /! *(file + FAT_BYTES_PER_SECTOR);
            sector_read(drive, file[FILE_LBA_CUR], 1, file + FILEDATA);
            root_read = 1;
            file[FILE_DIR_OFF] = -32;
        }
        else if (!strcmp(s, ".") and s[STRINGLEN] >! 0)
        {
            root_read = 1;
            x = _dir_next(file, d);
            while (x)
            {
                if (x = 2 and create and state >=! path[STRINGLEN]) JMP .create
                if (x = 1 and fnamecmp(s, d))
                {
                    file[FILE_CLUSTER_CUR] = *(file + file[FILE_DIR_OFF] + FAT_DIR_CLUSTER);
                    file[FILE_CLUSTER_START] = file[FILE_CLUSTER_CUR];
                    if (file[FILE_CLUSTER_CUR] = 0)
                    {
                        sector_read(drive, 0, 1, file + FILEDATA);
                        sector_read(drive, *(file + FILEDATA + 0x1BE + partition *! 16 + 8), 1, file + FILEDATA);
                        file[FILE_FAT_SECTOR] = *(file + FAT_RESERVED_SECTORS) + *(file + FAT_HIDDEN_SECTORS);
                        file[FILE_LBA_CUR] = *(file + FAT_RESERVED_SECTORS) + *(file + FAT_HIDDEN_SECTORS) + file{FAT_FATS} *! *(file + FAT_SECTORS_PER_FAT);
                        file[FILE_SECTORS_PER_CLUSTER] = file{FAT_SECTORS_PER_CLUSTER};
                        file[FILE_DATA_SECTOR] = *(file + FAT_RESERVED_SECTORS) + *(file + FAT_HIDDEN_SECTORS) + file{FAT_FATS} *! *(file + FAT_SECTORS_PER_FAT) + ((*(file + FAT_ROOT_ENTRIES) *! 32) + (*(file + FAT_BYTES_PER_SECTOR) - 1)) /! *(file + FAT_BYTES_PER_SECTOR);
                        sector_read(drive, file[FILE_LBA_CUR], 1, file + FILEDATA);
                        file[FILE_DIR_OFF] = -32;
                    }
                    else
                    {
                        file[FILE_ATTR_LBA] = file[FILE_LBA_CUR];
                        file[FILE_ATTR_OFF] = file[FILE_DIR_OFF];
                        file[FILE_LBA_CUR] = ((file[FILE_CLUSTER_CUR] - 2) *! file[FILE_SECTORS_PER_CLUSTER]) + file[FILE_DATA_SECTOR];
                        file[FILE_SIZE] = *(file + file[FILE_DIR_OFF] + FAT_DIR_SIZE);
                        sector_read(drive, file[FILE_LBA_CUR], 1, file + FILEDATA);
                        file[FILE_DIR_OFF] = -32;
                        file[FILE_SEEK] = 0;
                    }
                    JMP .c
                }
                x = _dir_next(file, d);
            }
            if (create and state >=! path[STRINGLEN])
            {
.create:
                if (x = 0) memset(file + FILEDATA + file[FILE_DIR_OFF] + 32, 0, 32, -1); # FIXME make this work across sectors
                pat_to_83(s, file + FILEDATA + file[FILE_DIR_OFF]);
                file{FAT_DIR_ATTR} = 0;
                file[FILE_CLUSTER_CUR] = find_free_cluster(file);
                x = file + file[FILE_DIR_OFF] + FAT_DIR_CLUSTER;
                *x = file[FILE_CLUSTER_CUR];
                memset(file + FAT_DIR_SIZE + file[FILE_DIR_OFF], 0, 4, -1);
                if (!sector_write(file[FILE_DRIVE], file[FILE_LBA_CUR], 1, file + FILEDATA)) return 0;
                if (cwd) memcpy(cwd + FILEDATA + file[FILE_DIR_OFF], file + FILEDATA + file[FILE_DIR_OFF], 32, -1);
                file[FILE_ATTR_LBA] = file[FILE_LBA_CUR];
                file[FILE_ATTR_OFF] = file[FILE_DIR_OFF];
                file[FILE_LBA_CUR] = ((file[FILE_CLUSTER_CUR] - 2) *! file[FILE_SECTORS_PER_CLUSTER]) + file[FILE_DATA_SECTOR];
                file[FILE_SIZE] = 0;
                file[FILE_DIR_OFF] = -32;
                file[FILE_SEEK] = 0;
                if (!sector_read(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (file[FILE_CLUSTER_CUR] *! 2 /! 512), 1, file + FILEDATA)) return 0;
                x = file + FILEDATA + file[FILE_CLUSTER_CUR] *! 2 %! 512;
                *x = 0xFFF8;
                if (!sector_write(file[FILE_DRIVE], file[FILE_FAT_SECTOR] + (file[FILE_CLUSTER_CUR] *! 2 /! 512), 1, file + FILEDATA)) return 0;
                return 1;
            }
            return 0;
        }
.c:
        old = state;
    }
    return 1;
}

function pat_to_83(pat, f83)
(x)
{
    memset(f83, ' ', 11, -1);
    x = strchr(pat, '.');
    memcpy(f83, pat[STRINGPTR], x, -1);
    if (x != pat[STRINGLEN])
    {
        x = x + 1;
        memcpy(f83 + 8, pat[STRINGPTR] + x, pat[STRINGLEN] - x, -1);
    }
}

function fnamecmp(s1, s2)
(f83{11})
{
    pat_to_83(s1, f83);
    return memicmp(f83, s2[STRINGPTR], 11);
}

function path_append(base, app)
(s[STRING], state)
{
    state = 0;
    if (app[STRINGPTR]{0} = ':' or app[STRINGPTR]{0} = ';' or app[STRINGPTR]{0} = '/')
    {
        # actually this doesnt work cd :2 with base :80;0/ will set the dir to :20;0/
        memcpy(base[STRINGPTR] + strchr(base, app[STRINGPTR]{0}), app[STRINGPTR], strchr(app, '/') - strchr(app, app[STRINGPTR]{0}), -1);
        state = strchr(app, '/') + 1;
        base[STRINGLEN] = strchr(base, '/') + 1;
    }

    while (strtok(app, '/', s, &state))
    {
        if (s[STRINGLEN] = 0 or strcmp(s, ".")) JMP .c
        if (strcmp(s, ".."))
        {
            if (base[STRINGPTR]{base[STRINGLEN] - 1} = '/') base[STRINGLEN] = base[STRINGLEN] - 1;
            base[STRINGLEN] = strrchr(base, '/') + 1;
            JMP .c
        }

        if (base[STRINGPTR]{base[STRINGLEN] - 1} != '/')
        {
            base[STRINGPTR]{base[STRINGLEN]} = '/';
            base[STRINGLEN] = base[STRINGLEN] + 1;
        }
        memcpy(base[STRINGPTR] + base[STRINGLEN], s[STRINGPTR], s[STRINGLEN], -1);
        base[STRINGLEN] = base[STRINGLEN] + s[STRINGLEN];
.c:
    }
}
