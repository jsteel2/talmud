struct FAT_BS = 3{BS_BOOTJMP}, 8{BS_OEM_NAME}, <BS_BYTES_PER_SECTOR>, {BS_SECTORS_PER_CLUSTER}, <BS_RESERVED_SECTOR_COUNT>, {BS_TABLE_COUNT}, <BS_ROOT_ENTRY_COUNT>, <BS_TOTAL_SECTORS_16>, {BS_MEDIA_TYPE}, <BS_TABLE_SIZE_16>, <BS_SECTORS_PER_TRACK>, <BS_HEAD_SIDE_COUNT>, [BS_HIDDEN_SECTOR_COUNT], [BS_TOTAL_SECTORS_32], [BS_TABLE_SIZE_32], <BS_EXTENDED_FLAGS>, <BS_FAT_VERSION>, [BS_ROOT_CLUSTER], <BS_FAT_INFO>, <BS_BACKUP_BS_SECTOR>, 12{BS_RESERVED}, {BS_DRIVE_NUMBER}, {BS_RESERVED2}, {BS_BOOT_SIGNATURE}, [BS_VOLUME_ID], 11{BS_VOLUME_LABEL}, 8{BS_FAT_TYPE_LABEL};

const PARTITION_TABLE = 0x1BE;
struct PARTITION = {PARTITION_ATTRIBUTES}, 3{PARTITION_CHS}, {PARTITION_TYPE}, 3{PARTITION_CHS_END}, [PARTITION_LBA], [PARTITION_LBA_SECTORS];

struct FILE = 512{FILE_BUF}, 512{FILE_CLUSTER_BUF}, [FILE_CLUSTER_BUF_SECTOR], {FILE_DRIVE}, {FILE_PARTITION}, {FILE_SECTORS_PER_CLUSTER}, [FILE_DATA_SECTOR], [FILE_FAT_SECTOR], [FILE_CLUSTER_CUR], [FILE_CLUSTER], [FILE_DIR_CLUSTER], [FILE_DIR_CLUSTER_CUR], [FILE_DIR_SEEK], [FILE_SEEK], [FILE_SIZE], {FILE_FLAGS};
const FILE_FREAD_ONLY = 1;
const FILE_FHIDDEN = 2;
const FILE_FSYSTEM = 4;
const FILE_FVOLUME_ID = 8;
const FILE_FDIRECTORY = 16;
const FILE_FARCHIVE = 32;
const FILE_FCREATE = 64;
const FILE_F83 = 128;
const FILE_FLFN = FILE_FREAD_ONLY | FILE_FHIDDEN | FILE_FSYSTEM | FILE_FVOLUME_ID;

struct DIR_ENTRY = 11{DIR_ENTRY_83NAME}, {DIR_ENTRY_ATTR}, {DIR_ENTRY_RESERVED}, {DIR_ENTRY_CREATE_HUNDRETHS}, <DIR_ENTRY_CREATE_TIME>, <DIR_ENTRY_CREATE_DATE>, <DIR_ENTRY_ACCESSED_DATE>, <DIR_ENTRY_CLUSTER_HI>, <DIR_ENTRY_MODIFICATION_TIME>, <DIR_ENTRY_MODIFICATION_DATE>, <DIR_ENTRY_CLUSTER_LO>, [DIR_ENTRY_FILE_SIZE];

function open(path, file, flags)
{
    return openat(&task{TASK_CWD}, path, file, flags);
}

function cd(path)
(f{FILE})
{
    if (open(path, f, 0) and f{FILE_FLAGS} & FILE_FDIRECTORY) memcpy(&task{TASK_CWD}, f, FILE);
    else return FALSE;
    return TRUE;
}

function openat(cwd, path, file, flags)
(s{STRING}, d{DIR_ENTRY}, state, end, read, x, r)
{
    if (cwd) memcpy(file, cwd, FILE);

    state = 0;
    read = FALSE;
    while (strtok(path, '/', s, &state))
    {
        if (s.[STRINGPTR]{0} == ':')
        {
            s.[STRINGPTR] += 1;
            file{FILE_DRIVE} = str2int(s, 16, &end);
            s.[STRINGPTR] += end;
            s.[STRINGLEN] -= end + 1;
        }
        if (s.[STRINGPTR]{0} == ';')
        {
            s.[STRINGPTR] += 1;
            file{FILE_PARTITION} = str2int(s, 16, &end);
            s.[STRINGPTR] += end;
            s.[STRINGLEN] -= end + 1;
        }

        if (!read and s.[STRINGLEN] == 0)
        {
.r:
            if (!lba_read(file{FILE_DRIVE}, 1, 0, file)) return FALSE;
            if (!lba_read(file{FILE_DRIVE}, 1, file.[PARTITION_TABLE + file{FILE_PARTITION} *! 16 + PARTITION_LBA], file)) return FALSE;

            file{FILE_SECTORS_PER_CLUSTER} = file{BS_SECTORS_PER_CLUSTER};
            file.[FILE_FAT_SECTOR] = file.<BS_RESERVED_SECTOR_COUNT> + file.[BS_HIDDEN_SECTOR_COUNT];
            file.[FILE_DATA_SECTOR] = file.[FILE_FAT_SECTOR] + file{BS_TABLE_COUNT} *! file.[BS_TABLE_SIZE_32];
            file.[FILE_CLUSTER_CUR] = file.[FILE_CLUSTER] = file.[BS_ROOT_CLUSTER];
            file.[FILE_CLUSTER_BUF_SECTOR] = 0;
            file.[FILE_SEEK] = 0;
            file{FILE_FLAGS} = FILE_FDIRECTORY;
            read = TRUE;
        }
        else if (s.[STRINGLEN] >! 0 and !strcmp(s, "."))
        {
            x = 0;
            while ((r = dir_next2(file, d)) >! 1)
            {
                if (r == 2 and !x) x = file.[FILE_SEEK] - DIR_ENTRY;
                if (r == 3 and (flags & FILE_F83 ? memcmp(s.[STRINGPTR], d, 11) : fnamecmp(s, d)))
                {
.f:
                    file.[FILE_DIR_CLUSTER] = file.[FILE_CLUSTER];
                    file.[FILE_DIR_CLUSTER_CUR] = file.[FILE_CLUSTER_CUR];
                    file.[FILE_DIR_SEEK] = file.[FILE_SEEK] - DIR_ENTRY;
                    file.[FILE_SIZE] = d.[DIR_ENTRY_FILE_SIZE];
                    file.[FILE_CLUSTER_CUR] = file.[FILE_CLUSTER] = d.<DIR_ENTRY_CLUSTER_HI> << 16 | d.<DIR_ENTRY_CLUSTER_LO>;
                    file.[FILE_SEEK] = 0;
                    file{FILE_FLAGS} = d{DIR_ENTRY_ATTR};
                    if (file.[FILE_CLUSTER] == 0) JMP .r
                    JMP .e
                }
            }
            if (flags & FILE_FCREATE and state >=! path.[STRINGLEN])
            {
                if (!x)
                {
                    x = file.[FILE_SEEK] - (r ? DIR_ENTRY : 0);
                    r = 4;
                }
                seek(file, x);
                memset(d, 0, DIR_ENTRY);
                name2f83(s, d);
                d{DIR_ENTRY_ATTR} = flags & ~FILE_FCREATE;
                x = alloc_cluster(file);
                d.<DIR_ENTRY_CLUSTER_LO> = x;
                d.<DIR_ENTRY_CLUSTER_HI> = x >> 16;
                write(file, DIR_ENTRY, d);
                if (r == 4)
                {
                    d{0} = 0;
                    x = file.[FILE_CLUSTER_CUR];
                    write(file, DIR_ENTRY, d);
                    file.[FILE_CLUSTER_CUR] = x;
                    file.[FILE_SEEK] -= DIR_ENTRY;
                }
                JMP .f
            }
            return FALSE;
        }
.e:
    }

    return TRUE;
}

function uppersl(d, s, n)
{
    while (n)
    {
        n -= 1;
        d{n} = upper(s{n});
    }
}

function name2f83(s, o83)
(x)
{
    memset(o83, ' ', 11);
    if (s.[STRINGPTR]{0} == '.') return uppersl(o83, s.[STRINGPTR], s.[STRINGLEN]);

    x = strchr(s, '.');
    uppersl(o83, s.[STRINGPTR], x);
    if (x == s.[STRINGLEN]) return;
    uppersl(o83 + 8, s.[STRINGPTR] + x + 1, s.[STRINGLEN] - x - 1);
}

function fnamecmp(s, d83)
(f83{11})
{
    name2f83(s, f83);
    return memcmp(f83, d83, 11);
}

function dir_next2(file, outentry)
{
.again:
    if (!read(file, DIR_ENTRY, outentry)) return 0;
    if (outentry{0} == 0) return 1;
    if (outentry{0} == 0xE5) return 2;
    if (outentry{DIR_ENTRY_ATTR} == FILE_FLFN) JMP .again
    return 3;
}

function dir_next(file, outentry)
(r)
{
.again:
    r = dir_next2(file, outentry);
    if (r == 2) JMP .again
    return r == 3;
}

function cur_sector(file)
{
    return cluster2sector(file, file.[FILE_CLUSTER_CUR]) + (file.[FILE_SEEK] %! (file{FILE_SECTORS_PER_CLUSTER} *! 512)) /! 512;
}

function advance_clusterr(file)
(s)
{
    if (file.[FILE_SEEK] & 511 == 0 and file.[FILE_SEEK] /! 512 %! file{FILE_SECTORS_PER_CLUSTER} == 0)
    {
        s = file.[FILE_FAT_SECTOR] + file.[FILE_CLUSTER_CUR] *! 4 /! 512;
        if (file.[FILE_CLUSTER_BUF_SECTOR] != s and !lba_read(file{FILE_DRIVE}, 1, s, &file{FILE_CLUSTER_BUF})) return FALSE;
        file.[FILE_CLUSTER_BUF_SECTOR] = s;
        file.[FILE_CLUSTER_CUR] = file.[FILE_CLUSTER_BUF + file.[FILE_CLUSTER_CUR] *! 4 %! 512] & 0x0FFFFFFF;
        if (file.[FILE_CLUSTER_CUR] >=! 0x0FFFFFF7) return FALSE;
    }
    return TRUE;
}

function advance_clusterw(file)
(c, x)
{
    if (file.[FILE_SEEK] & 511 == 0 and file.[FILE_SEEK] /! 512 %! file{FILE_SECTORS_PER_CLUSTER} == 0)
    {
        c = file.[FILE_FAT_SECTOR] + file.[FILE_CLUSTER_CUR] *! 4 /! 512;
        if (file.[FILE_CLUSTER_BUF_SECTOR] != c and !lba_read(file{FILE_DRIVE}, 1, c, &file{FILE_CLUSTER_BUF})) return FALSE;
        file.[FILE_CLUSTER_BUF_SECTOR] = c;
        x = FILE_CLUSTER_BUF + file.[FILE_CLUSTER_CUR] *! 4 %! 512;
        file.[FILE_CLUSTER_CUR] = file.[x] & 0x0FFFFFFF;
        if (file.[FILE_CLUSTER_CUR] >=! 0x0FFFFFF8)
        {
            file.[FILE_CLUSTER_CUR] = alloc_cluster(file);
            if (!lba_read(file{FILE_DRIVE}, 1, c, &file{FILE_CLUSTER_BUF})) return FALSE;
            file.[x] = file.[x] & 0xF0000000 | file.[FILE_CLUSTER_CUR];
            if (!lba_write(file{FILE_DRIVE}, 1, c, &file{FILE_CLUSTER_BUF})) return FALSE;
        }
        if (file.[FILE_CLUSTER_CUR] >=! 0x0FFFFFF7) return FALSE;
    }
    return TRUE;
}

function read(file, n, buf)
(sectors_read, x, i)
{
    if (!(file{FILE_FLAGS} & FILE_FDIRECTORY)) n = minu(n, file.[FILE_SIZE] - file.[FILE_SEEK]);
    i = n;
    while (n)
    {
        if (file.[FILE_SEEK] & 511 == 0)
        {
            if (n >=! 512)
            {
                sectors_read = minu(n /! 512, file{FILE_SECTORS_PER_CLUSTER} - file.[FILE_SEEK] /! 512 %! file{FILE_SECTORS_PER_CLUSTER});
                if (!lba_read(file{FILE_DRIVE}, sectors_read, cur_sector(file), buf)) return i - n;
                x = sectors_read *! 512;
                file.[FILE_SEEK] += x;
                n -= x;
                buf += x;
            }
            else
            {
                if (!lba_read(file{FILE_DRIVE}, 1, cur_sector(file), file)) return i - n;
                memcpy(buf, file, n);
                file.[FILE_SEEK] += n;
                return i;
            }
        }
        else
        {
            x = minu(n, 512 - (file.[FILE_SEEK] & 511));
            memcpy(buf, file + (file.[FILE_SEEK] & 511), x);
            file.[FILE_SEEK] += x;
            n -= x;
            buf += x;
        }
        if (!advance_clusterr(file)) return i - n;
    }

    return i;
}

function seek(file, w)
(e, i, x)
{
    x = file.[FILE_SEEK] /! 512;
    e = w /! 512 /! file{FILE_SECTORS_PER_CLUSTER};
    i = x /! file{FILE_SECTORS_PER_CLUSTER};
    if (e <! i)
    {
        file.[FILE_CLUSTER_CUR] = file.[FILE_CLUSTER];
        i = 0;
    }
    file.[FILE_SEEK] = 0;
    while (i <! e)
    {
        if (!advance_clusterr(file)) return FALSE;
        i += 1;
    }
    file.[FILE_SEEK] = w;
    if (w & 511 and x != w /! 512)
    {
        if (!lba_read(file{FILE_DRIVE}, 1, cur_sector(file), file)) return FALSE;
    }
    return TRUE;
}

function write(file, n, buf)
(sectors_write, x, i)
{
    i = n;
    while (n)
    {
        if (file.[FILE_SEEK] & 511 == 0)
        {
            if (n >=! 512)
            {
                sectors_write = minu(n /! 512, file{FILE_SECTORS_PER_CLUSTER} - file.[FILE_SEEK] /! 512 %! file{FILE_SECTORS_PER_CLUSTER});
                if (!lba_write(file{FILE_DRIVE}, sectors_write, cur_sector(file), buf)) return i - n;
                x = sectors_write *! 512;
                file.[FILE_SEEK] += x;
                n -= x;
                buf += x;
            }
            else
            {
                if (!lba_read(file{FILE_DRIVE}, 1, cur_sector(file), file)) return i - n;
                memcpy(file, buf, n);
                if (!lba_write(file{FILE_DRIVE}, 1, cur_sector(file), file)) return i - n;
                file.[FILE_SEEK] += n;
                return i;
            }
        }
        else
        {
            x = minu(n, 512 - (file.[FILE_SEEK] & 511));
            memcpy(file + (file.[FILE_SEEK] & 511), buf, x);
            if (!lba_write(file{FILE_DRIVE}, 1, cur_sector(file), file)) return i - n;
            file.[FILE_SEEK] += x;
            n -= x;
            buf += x;
        }
        if (!advance_clusterw(file)) return i - n;
    }
    return i;
}

function resize(f, size)
(d{FILE})
{
    if (size /! 512 /! f{FILE_SECTORS_PER_CLUSTER} <! f.[FILE_SIZE] /! 512 /! f{FILE_SECTORS_PER_CLUSTER})
    {
        # TODO shrink file
        # make a free_clusters function to free a cluster chain from x cluster
        # and also make it set cluster_alloc_start
    }
    f.[FILE_SIZE] = size;
    d.[FILE_DATA_SECTOR] = f.[FILE_DATA_SECTOR];
    d{FILE_SECTORS_PER_CLUSTER} = f{FILE_SECTORS_PER_CLUSTER};
    d.[FILE_CLUSTER_CUR] = f.[FILE_DIR_CLUSTER_CUR];
    d.[FILE_SEEK] = f.[FILE_DIR_SEEK];
    if (!lba_read(f{FILE_DRIVE}, 1, cur_sector(d), d)) return FALSE;
    d.[d.[FILE_SEEK] %! 512 + DIR_ENTRY_FILE_SIZE] = f.[FILE_SIZE];
    if (!lba_write(f{FILE_DRIVE}, 1, cur_sector(d), d)) return FALSE;
    return TRUE;
}

function cluster2sector(file, cluster) return ((cluster - 2) *! file{FILE_SECTORS_PER_CLUSTER}) + file.[FILE_DATA_SECTOR];

global cluster_alloc_start;
function alloc_cluster(file)
(buf{512}, sector, i)
{
    sector = cluster_alloc_start;
    while (TRUE) # TODO terminate on end of FAT
    {
        if (!lba_read(file{FILE_DRIVE}, 1, file.[FILE_FAT_SECTOR] + sector, buf)) return 0x0FFFFFF8;
        i = 0;
        while (i <! 512 /! 4)
        {
            if (buf[i] & 0x0FFFFFFF == 0)
            {
                cluster_alloc_start = sector;
                buf[i] |= 0x0FFFFFF8;
                if (!lba_write(file{FILE_DRIVE}, 1, file.[FILE_FAT_SECTOR] + sector, buf)) return 0x0FFFFFF8;
                return i + sector *! 128;
            }
            i += 1;
        }
        sector += 1;
    }
}

function dir2path(v, p)
(s{STRING}, st{VEC}, f{FILE}, d{DIR_ENTRY}, c, l)
{
    if (!vec_resize(v, 19)) return FALSE;
    v.[VEC_LEN] = 1;
    v.[VEC_PTR]{0} = ':';
    s.[STRINGPTR] = &v.[VEC_PTR]{1};
    int2str(s, p{FILE_DRIVE}, 16, FALSE);
    v.[VEC_LEN] += s.[STRINGLEN] + 1;
    v.[VEC_PTR]{v.[VEC_LEN] - 1} = ';';
    s.[STRINGPTR] = &v.[VEC_PTR]{v.[VEC_LEN]};
    int2str(s, p{FILE_PARTITION}, 16, FALSE);
    v.[VEC_LEN] += s.[STRINGLEN] + 1;
    v.[VEC_PTR]{v.[VEC_LEN] - 1} = '/';

    c = p.[FILE_CLUSTER];
    memcpy(f, p, FILE);
    if (!vec_init(st, 8, 4)) return FALSE;
    while (openat(NULL, "..", f, 0))
    {
        while (dir_next(f, d))
        {
            if ((d.<DIR_ENTRY_CLUSTER_HI> << 16) | d.<DIR_ENTRY_CLUSTER_LO> == c)
            {
                c = malloc(11);
                memcpy(c, &d{DIR_ENTRY_83NAME}, 11);
                vec_push4(st, c);
                break;
            }
        }
        seek(f, 0);
        c = f.[FILE_CLUSTER];
    }

    s.[STRINGLEN] = 11;
    while (vec_pop(st, &c))
    {
        s.[STRINGPTR] = c;
        l = strchr(s, ' ');
        if (!vec_resize(v, v.[VEC_LEN] + 1 + l))
        {
            vec_free(st);
            return FALSE;
        }
        memcpy(&v.[VEC_PTR]{v.[VEC_LEN]}, c, l);
        v.[VEC_PTR]{v.[VEC_LEN] + l} = '/';
        v.[VEC_LEN] += 1 + l;
        free(c);
    }

    vec_free(st);
    return TRUE;
}

function _mkdiratf(cwd, path, file, flags)
(buf{DIR_ENTRY *! 2 + 1})
{
    if (!openat(cwd, path, file, FILE_FCREATE | FILE_FDIRECTORY | flags)) return FALSE;
    memcpy(buf, ".          ".[STRINGPTR], 11);
    buf{DIR_ENTRY_ATTR} = FILE_FDIRECTORY;
    buf.<DIR_ENTRY_CLUSTER_LO> = file.[FILE_CLUSTER];
    buf.<DIR_ENTRY_CLUSTER_HI> = file.[FILE_CLUSTER] >> 16;
    memcpy(buf + DIR_ENTRY, "..         ".[STRINGPTR], 11);
    buf{DIR_ENTRY + DIR_ENTRY_ATTR} = FILE_FDIRECTORY;
    buf.<DIR_ENTRY + DIR_ENTRY_CLUSTER_LO> = cwd.[FILE_CLUSTER];
    buf.<DIR_ENTRY + DIR_ENTRY_CLUSTER_HI> = cwd.[FILE_CLUSTER] >> 16;
    buf{DIR_ENTRY *! 2} = 0;
    if (!write(file, DIR_ENTRY *! 2 + 1, buf)) return FALSE;
    return seek(file, 0);
}

function mkdiratf(cwd, path, file) return _mkdiratf(cwd, path, file, 0);

function mkdirf(path, file) return mkdiratf(&task{TASK_CWD}, path, file);
function mkdir(path) (file{FILE}) return mkdirf(path, file);

function _copyfromto(srcdir, src, destdir, dest, flags)
(srcf{FILE}, destf{FILE}, d{FILE}, e{DIR_ENTRY}, buf, s{STRING})
{
    if (!openat(srcdir, src, srcf, flags)) return FALSE;
    if (srcf{FILE_FLAGS} & FILE_FDIRECTORY)
    {
        if (!mkdiratf(destdir, dest, destf, flags)) return FALSE;
        memcpy(d, srcf, FILE);
        while (dir_next(d, e))
        {
            if (e{0} == '.') JMP .l
            s.[STRINGLEN] = 11;
            s.[STRINGPTR] = e;
            if (!_copyfromto(srcf, s, destf, s, FILE_F83)) return FALSE;
.l:
        }
    }
    else
    {
        if (!openat(destdir, dest, destf, flags | FILE_FCREATE)) return FALSE;
        buf = malloc(4096);
        while (write(destf, read(srcf, 4096, buf), buf));
        resize(destf, srcf.[FILE_SIZE]);
    }
    return TRUE;
}

function copyfromto(srcdir, src, destdir, dest) return _copyfromto(srcdir, src, destdir, dest, 0);

function copyfrom(srcdir, src, dest) return copyfromto(srcdir, src, &task{TASK_CWD}, dest);
function copyto(src, destdir, dest) return copyfromto(&task{TASK_CWD}, src, destdir, dest);
function copy(src, dest) return copyto(src, &task{TASK_CWD}, dest);