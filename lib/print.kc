import "/lib/string.kc"
import "/lib/vararg.kc"
import "/lib/util.kc"

function format(fn, fmt)
(s[STRING], i, start, v)
{
    i = 0;
    start = 0;
    v = 2;
    while (i <! fmt[STRINGLEN])
    {
        if (fmt[STRINGPTR]{i} = '%')
        {
            s[STRINGLEN] = i - start;
            s[STRINGPTR] = fmt[STRINGPTR] + start;
            fn(s);
            if (fmt[STRINGPTR]{i + 1} = 's') fn(vararg(v));
            else if (fmt[STRINGPTR]{i + 1} = 'd') format_int(fn, vararg(v));
            else if (fmt[STRINGPTR]{i + 1} = 'c') format_char(fn, vararg(v));
            start = i + 2;
            v = v + 1;
        }
        i = i + 1;
    }
    s[STRINGLEN] = i - start;
    s[STRINGPTR] = fmt[STRINGPTR] + start;
    fn(s);
}

function format_int(fn, int)
(s[STRING], buf{4}, i)
{
    s[STRINGLEN] = 4;
    s[STRINGPTR] = buf;
    i = 0;
    while (i <! 4)
    {
        buf{i} = (int >> 12 & 0xF) + '0';
        if (buf{i} >! '9') buf{i} = buf{i} + 7;
        int = int << 4;
        i = i + 1;
    }
    fn(s);
}

function format_char(fn, char)
(s[STRING])
{
    s[STRINGLEN] = 1;
    s[STRINGPTR] = &char;
    fn(s);
}

function print(s)
(i, len, c)
{
    i = 0;
    len = s[STRINGLEN];
    while (i <! len)
    {
        c = s[STRINGPTR]{i};
        MOV AL, [c]
        MOV AH, 0x0E
        INT 0x10
        i = i + 1;
    }
}

function input(outstr, maxsize)
(char, scan, len, cursor, s[STRING])
{
    len = 0;
    char = 0;
    scan = 0;
    cursor = 0;
    while (len <! maxsize)
    {
.c:
        MOV AH, 0x00
        INT 0x16
        MOV [char], AL
        MOV [scan], AH
        if (char = '\r') JMP .x
        if (char = '\b')
        {
            if (cursor = 0) JMP .c
            MOV AL, [char]
            MOV AH, 0x0E
            INT 0x10
            memcpy(outstr[STRINGPTR] + cursor - 1, outstr[STRINGPTR] + cursor, len - cursor, -1);
            s[STRINGLEN] = len - cursor;
            s[STRINGPTR] = outstr[STRINGPTR] + cursor - 1;
            format(print, "%s ", s);
            cursor_move(-s[STRINGLEN] - 1);
            cursor = cursor - 1;
            len = len - 1;
        }
        else if (scan = 0x4B)
        {
            if (cursor >! 0)
            {
                cursor = cursor - 1;
                cursor_move(-1);
            }
        }
        else if (scan = 0x4D)
        {
            if (cursor <! len)
            {
                cursor = cursor + 1;
                cursor_move(1);
            }
        }
        else
        {
            MOV AL, [char]
            MOV AH, 0x0E
            INT 0x10
            memmove(outstr[STRINGPTR] + cursor + 1, outstr[STRINGPTR] + cursor, len - cursor, -1);
            s[STRINGLEN] = len - cursor;
            s[STRINGPTR] = outstr[STRINGPTR] + cursor + 1;
            print(s);
            cursor_move(-s[STRINGLEN]);
            outstr[STRINGPTR]{cursor} = char;
            cursor = cursor + 1;
            len = len + 1;
        }
    }
.x:
    outstr[STRINGLEN] = len;
    print("\r\n");
}

function cursor_move(off)
(col, row, i)
{
    col = 0;
    row = 0;
    i = off;
    MOV BH, 0
    MOV AH, 0x03
    INT 0x10
    MOV [col], DL
    MOV [row], DH
    while (col + i >$ 80)
    {
        row = row + 1;
        i = i - 80;
    }
    col = (col + off) %! 80;
    MOV AH, 0x02
    MOV DL, [col]
    MOV DH, [row]
    MOV BH, 0
    INT 0x10
}
