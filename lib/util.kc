import "/lib/string.kc"

function minu(x, y) return x <! y ? x : y;
function maxu(x, y) return x >! y ? x : y;
function mins(x, y) return x <$ y ? x : y;
function maxs(x, y) return x >$ y ? x : y;
function upper(c) return c >=! 'a' and c <=! 'z' ? c + 'A' - 'a' : c;
function lower(c) return c >=! 'A' and c <=! 'Z' ? c - 'A' - 'a' : c;

function strtok(s, delim, out, state)
(start)
{
    if (*state >=! s[STRINGLEN]) return 0;
    start = *state;
    out[STRINGPTR] = s[STRINGPTR] + start;
    while (s[STRINGPTR]{*state} != delim)
    {
        if (*state >=! s[STRINGLEN]) JMP .e;
        *state = *state + 1;
    }
.e:
    out[STRINGLEN] = *state - start;
    *state = *state + 1;
    return 1;
}

function strchr(s, c)
(i)
{
    i = 0;
    while (i <! s[STRINGLEN] and s[STRINGPTR]{i} != c) i = i + 1;
    return i;
}

function strrchr(s, c)
(i)
{
    i = s[STRINGLEN] - 1;
    while (i and s[STRINGPTR]{i} != c) i = i - 1;
    return i;
}

function memcpy(d, s, n, seg)
{
    if (seg = -1) MOV [seg], DS
    MOV ES, [seg]
    MOV CX, [n]
    MOV SI, [s]
    MOV DI, [d]
    CLD
    REPNZ MOVSB
    MOV AX, DS
    MOV ES, AX
}

function memmove(d, s, n, seg)
{
    if (seg = -1) MOV [seg], DS
    if (d <! s)
    {
        return memcpy(d, s, n, seg);
    }
    else
    {
        MOV ES, [seg]
        MOV CX, [n]
        MOV SI, [s]
        MOV DI, [d]
        ADD SI, [n]
        ADD DI, [n]
        DEC SI
        DEC DI
        STD
        REPNZ MOVSB
        MOV AX, DS
        MOV ES, AX
    }
}

function strcmp(x, y)
{
    if (*x != *y) return 0;
    MOV BX, [x]
    MOV CX, [BX]
    MOV SI, [x]
    MOV SI, [SI+2]
    MOV DI, [y]
    MOV DI, [DI+2]
    CLD
    REPNZ CMPSB
    JZ .e
    return 0;
.e: return 1;
}

function stricmp(x, y)
(i, l)
{
    l = x[STRINGLEN];
    if (l != y[STRINGLEN]) return 0;
    i = 0;
    while (i <! l)
    {
        if (upper(x[STRINGPTR]{i}) != upper(y[STRINGPTR]{i})) return 0;
        i = i + 1;
    }
    return 1;
}

function atoi(s, end)
(n, c)
{
    *end = 0;
    n = 0;
    c = s[STRINGPTR]{*end};
    while (*end <! s[STRINGLEN])
    {
        n = n << 4;
        if (c >=! '0' and c <=! '9') n = n + c - '0';
        else if (upper(c) >=! 'A' and upper(c) <=! 'F') n = n + upper(c) - 'A';
        else JMP .e
        *end = *end + 1;
        c = s[STRINGPTR]{*end};
    }
    *end = *end - 1;
    return n;
.e:
    return n >> 4;
}
