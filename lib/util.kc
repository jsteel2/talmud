function minu(x, y) return x <! y ? x : y;
function upper(c) return islower(c) ? c + 'A' - 'a' : c;
function islower(c) return c >=! 'a' and c <=! 'z';
function isnum(c) return c >=! '0' and c <=! '9';
function isalpha(c) return upper(c) >=! 'A' and upper(c) <=! 'Z';
function isalnum(c) return isalpha(c) or isnum(c);
function ishex(c) return upper(c) >=! 'A' and upper(c) <=! 'F' or isnum(c);
function isspace(c) return c == ' ' or c == '\t' or c == '\n' or c == '\r';

function memcpy(dest, src, n)
{
    if (dest == src) return;
    CLD
    MOV ESI, [src]
    MOV EDI, [dest]
    MOV ECX, [n]
    REP MOVSB
}

function memcmp(x, y, n)
{
    if (x == y) return TRUE;
    CLD
    MOV ESI, [x]
    MOV EDI, [y]
    MOV ECX, [n]
    REP CMPSB
    JZ .e
    return FALSE;
.e: return TRUE;
}

function memicmp(x, y, n)
(i)
{
    if (x == y) return TRUE;

    i = 0;
    while (i <! n)
    {
        if (upper(x{i}) != upper(y{i})) return FALSE;
        i += 1;
    }

    return TRUE;
}

function memset(d, x, n)
{
    CLD
    MOV AL, [x]
    MOV EDI, [d]
    MOV ECX, [n]
    REP STOSB
}

function strcmp(x, y)
{
    if (x.[STRINGLEN] != y.[STRINGLEN]) return FALSE;
    return memcmp(x.[STRINGPTR], y.[STRINGPTR], x.[STRINGLEN]);
}

function strchr(s, c)
(i)
{
    i = 0;
    while (i <! s.[STRINGLEN] and s.[STRINGPTR]{i} != c) i += 1;
    return i;
}

function strtok(s, delim, out, state)
(start)
{
    if (*state >=! s.[STRINGLEN]) return FALSE;

    start = *state;
    out.[STRINGPTR] = s.[STRINGPTR] + *state;
    while (*state <! s.[STRINGLEN] and s.[STRINGPTR]{*state} != delim) *state += 1;
    out.[STRINGLEN] = *state - start;

    *state += 1;
    return TRUE;
}

function reverse(s)
(i, c)
{
    i = 0;
    while (i <! s.[STRINGLEN] /! 2)
    {
        c = s.[STRINGPTR]{i};
        s.[STRINGPTR]{i} = s.[STRINGPTR]{s.[STRINGLEN] - 1 - i};
        s.[STRINGPTR]{s.[STRINGLEN] - 1 - i} = c;
        i += 1;
    }
    return s;
}

function hex2int(s, end)
(n, c)
{
    *end = 0;
    n = 0;
    
    while (*end <! s.[STRINGLEN])
    {
        c = s.[STRINGPTR]{*end};
        n <<= 4;

        if (isnum(c)) n |= c - '0';
        else if (ishex(c)) n |= 10 + upper(c) - 'A';
        else return n >> 4;
        
        *end += 1;
    }

    return n;
}

function format(fn, fmt)
(s{STRING}, i, start, v, c)
{
    i = 0;
    start = 0;
    v = 2;

    while (i <! fmt.[STRINGLEN])
    {
        c = fmt.[STRINGPTR]{i};
        if (c == '%')
        {
            s.[STRINGPTR] = fmt.[STRINGPTR] + start;
            s.[STRINGLEN] = i - start;
            fn(s);

            i += 1;
            c = fmt.[STRINGPTR]{i};
            if (c == 's') fn(vararg(v));
            else if (c == 'x') format_hex(fn, s, vararg(v));
            else if (c == 'u') format_udec(fn, s, vararg(v));
            else if (c == 'c') format_char(fn, s, vararg(v));

            start = i + 1;
            v += 1;
        }
        i += 1;
    }

    s.[STRINGPTR] = fmt.[STRINGPTR] + start;
    s.[STRINGLEN] = i - start;
    fn(s);
}

function format_hex(fn, s, n)
(buf{8}, i, c)
{
    s.[STRINGPTR] = buf;
    fn(int2str(s, n, 16, FALSE));
}

function format_udec(fn, s, n)
(buf{10}, i)
{
    s.[STRINGPTR] = buf;
    fn(int2str(s, n, 10, FALSE));
}

function format_char(fn, s, c)
{
    s.[STRINGPTR] = &c;
    s.[STRINGLEN] = 1;
    fn(s);
}

function int2str(s, n, radix, signed)
(p, i)
{
    s.[STRINGLEN] = 0;
    p = s.[STRINGPTR];
    if (signed and n <$ 0)
    {
        p{0} = '-';
        s.[STRINGLEN] += 1;
    }

    while (n or s.[STRINGLEN] == 0)
    {
        i = n %! radix;
        n /!= radix;
        if (i <! 10) p{s.[STRINGLEN]} = i + '0';
        else p{s.[STRINGLEN]} = i + 'A' - 10;
        s.[STRINGLEN] += 1;
    }

    return reverse(s);
}

vararg:
    MOV EAX, [ESP + 4]
    MOV EAX, [EBP + EAX * 4 + 8]
    RET