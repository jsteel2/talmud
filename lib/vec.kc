struct VEC = [VEC_LEN], [VEC_PTR], [VEC_SIZE], [VEC_ENTRY_SIZE];

function vec_init(v, size, entry_size)
{
    v.[VEC_ENTRY_SIZE] = entry_size;
    v.[VEC_SIZE] = size;
    v.[VEC_LEN] = 0;
    return v.[VEC_PTR] = malloc(size *! entry_size);
}

function vec_free(v)
{
    free(v.[VEC_PTR]);
}

function vec_resize(v, new_len)
{
    if (new_len >! v.[VEC_SIZE])
    {
        v.[VEC_SIZE] *!= 2;
        v.[VEC_PTR] = realloc(v.[VEC_PTR], v.[VEC_SIZE] *! v.[VEC_ENTRY_SIZE]);
        if (!v.[VEC_PTR]) return FALSE;
    }
    return TRUE;
}

function vec_set(v, i, p)
{
    if (!vec_resize(v, i + 1)) return FALSE;
    memcpy(&v.[VEC_PTR]{i *! v.[VEC_ENTRY_SIZE]}, p, v.[VEC_ENTRY_SIZE]);
    return TRUE;
}

function vec_set1(v, i, x)
{
    if (!vec_resize(v, i + 1)) return FALSE;
    v.[VEC_PTR]{i} = x;
    return TRUE;
}

function vec_set4(v, i, x)
{
    if (!vec_resize(v, i + 1)) return FALSE;
    v.[VEC_PTR][i] = x;
    return TRUE;
}

function vec_push(v, p)
{
    if (!vec_set(v, v.[VEC_LEN], p)) return FALSE;
    v.[VEC_LEN] += 1;
    return TRUE;
}

function vec_push1(v, x)
{
    if (!vec_set1(v, v.[VEC_LEN], x)) return FALSE;
    v.[VEC_LEN] += 1;
    return TRUE;
}

function vec_push4(v, x)
{
    if (!vec_set4(v, v.[VEC_LEN], x)) return FALSE;
    v.[VEC_LEN] += 1;
    return TRUE;
}

function vec_push_circ(v, p)
{
    while (v.[VEC_LEN] >=! v.[VEC_SIZE]) vec_shift(v, NULL);
    vec_push(v, p);
}

function vec_push1_circ(v, x)
{
    while (v.[VEC_LEN] >=! v.[VEC_SIZE]) vec_shift(v, NULL);
    vec_push1(v, x);
}

function vec_remove(v, p, i)
{
    if (v.[VEC_LEN] <=! i) return FALSE;
    if (p) memcpy(p, v.[VEC_PTR] + i *! v.[VEC_ENTRY_SIZE], v.[VEC_ENTRY_SIZE]);
    v.[VEC_LEN] -= 1;
    memcpy(v.[VEC_PTR] + i *! v.[VEC_ENTRY_SIZE], v.[VEC_PTR] + (i + 1) *! v.[VEC_ENTRY_SIZE], (v.[VEC_LEN] - i) *! v.[VEC_ENTRY_SIZE]);
    return TRUE;
}

function vec_shift(v, p)
{
    return vec_remove(v, p, 0);
}

function vec_pop(v, p)
{
    if (v.[VEC_LEN] == 0) return FALSE;
    v.[VEC_LEN] -= 1;
    memcpy(p, &v.[VEC_PTR]{v.[VEC_LEN] *! v.[VEC_ENTRY_SIZE]}, v.[VEC_ENTRY_SIZE]);
    return TRUE;
}