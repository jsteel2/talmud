struct QOI_HEADER = 4{QOI_MAGIC}, [QOI_WIDTH], [QOI_HEIGHT], {QOI_CHANNELS}, {QOI_COLORSPACE};
const QOI_OP_RGB = 0xFE, QOI_OP_RGBA = 0xFF, QOI_OP_INDEX = 0x00, QOI_OP_DIFF = 0x40, QOI_OP_LUMA = 0x80, QOI_OP_RUN = 0xC0, QOI_MASK_2 = 0xC0;

function load_qoi(path, ow, oh)
(file{FILE}, p, x)
{
    if (!open(path, file, 0)) return NULL;
    p = malloc(file.[FILE_SIZE]);
    if (!p) return NULL;
    if (read(file, file.[FILE_SIZE], p) != file.[FILE_SIZE])
    {
        free(p);
        return NULL;
    }
    x = parse_qoi(p, file.[FILE_SIZE], ow, oh);
    free(p);
    return x;
}

function parse_qoi(b, size, ow, oh)
(p, px{4}, index[64], pi, bi, pe, run, pb, b1, b2, vg)
{
    if (b.[QOI_MAGIC] != 'fioq') return NULL;
    *ow = swap32(b.[QOI_WIDTH]);
    *oh = swap32(b.[QOI_HEIGHT]);
    p = malloc((pe = *ow *! *oh) *! 4);
    if (!p) return NULL;
    px[0] = 0xFF000000;
    memsetd(index, 0, 64);
    pi = 0;
    run = 0;
    pb = QOI_HEADER;
    while (pi <! pe)
    {
        if (run >! 0)
        {
            run -= 1;
        }
        else if (pb <! size - 8)
        {
            if ((b1 = b{pb}) == QOI_OP_RGB)
            {
                px{2} = b{pb + 1};
                px{1} = b{pb + 2};
                px{0} = b{pb + 3};
                pb += 4;
            }
            else if (b1 == QOI_OP_RGBA)
            {
                px{2} = b{pb + 1};
                px{1} = b{pb + 2};
                px{0} = b{pb + 3};
                px{3} = b{pb + 4};
                pb += 5;
            }
            else if ((b1 & QOI_MASK_2) == QOI_OP_INDEX)
            {
                px[0] = index[b1];
                pb += 1;
            }
            else if ((b1 & QOI_MASK_2) == QOI_OP_DIFF)
            {
                px{2} += ((b1 >> 4) & 0x03) - 2;
                px{1} += ((b1 >> 2) & 0x03) - 2;
                px{0} += (b1 & 0x03) - 2;
                pb += 1;
            }
            else if ((b1 & QOI_MASK_2) == QOI_OP_LUMA)
            {
                b2 = b{pb + 1};
                vg = (b1 & 0x3F) - 32;
                px{2} += vg - 8 + ((b2 >> 4) & 0x0F);
                px{1} += vg;
                px{0} += vg - 8 + (b2 & 0x0F);
                pb += 2;
            }
            else if ((b1 & QOI_MASK_2) == QOI_OP_RUN)
            {
                run = b1 & 0x3F;
                pb += 1;
            }
            index[(px{2} *! 3 + px{1} *! 5 + px{0} *! 7 + px{3} *! 11) %! 64] = px[0];
        }
        p[pi] = px[0];
        pi += 1;
    }
    return p;
}