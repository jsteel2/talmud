const HI_MEM_START = 0x00100000, EXT_MEM_START = 0x01000000;
struct MEM_HEADER = {MEM_HEADER_USED}, [MEM_HEADER_SIZE], [MEM_HEADER_NEXT], [MEM_HEADER_PREV];
global first_free;

function malloc_init(lowmem_start)
(lowmem, himem, extmem, eax, ecx, edx, unused)
{
    interrupt(0x12, &eax, &unused, &unused, &unused, &unused, &unused);
    lowmem = (eax & 0xffff) *! 1024 - lowmem_start;
    eax = 0xE801;
    ecx = 0;
    edx = 0;
    interrupt(0x15, &eax, &ecx, &edx, &unused, &unused, &unused);
    himem = (ecx & 0xffff) *! 1024;
    extmem = (edx & 0xffff) *! 1024 *! 64;
    format(print, "%uK of low, %uM of high and %uM of extended memory available for use.\n", lowmem /! 1024, himem /! 1024 /! 1024, extmem /! 1024 /! 1024);
    lowmem_start{MEM_HEADER_USED} = FALSE;
    lowmem_start.[MEM_HEADER_SIZE] = lowmem - MEM_HEADER;
    lowmem_start.[MEM_HEADER_NEXT] = himem ? HI_MEM_START : extmem ? EXT_MEM_START : NULL;
    lowmem_start.[MEM_HEADER_PREV] = NULL;
    first_free = lowmem_start;

    if (himem)
    {
        HI_MEM_START{MEM_HEADER_USED} = FALSE;
        HI_MEM_START.[MEM_HEADER_SIZE] = himem - MEM_HEADER;
        HI_MEM_START.[MEM_HEADER_NEXT] = extmem ? EXT_MEM_START : NULL;
        HI_MEM_START.[MEM_HEADER_PREV] = lowmem_start;
    }
    if (extmem)
    {
        EXT_MEM_START{MEM_HEADER_USED} = FALSE;
        EXT_MEM_START.[MEM_HEADER_SIZE] = extmem - MEM_HEADER;
        EXT_MEM_START.[MEM_HEADER_NEXT] = NULL;
        EXT_MEM_START.[MEM_HEADER_PREV] = himem ? HI_MEM_START : NULL;
    }
}

function malloc(n)
(left, right)
{
    left = first_free;
    while (left and (left{MEM_HEADER_USED} or left.[MEM_HEADER_SIZE] <! n)) left = left.[MEM_HEADER_NEXT];
    if (!left) return NULL;
    
    left{MEM_HEADER_USED} = TRUE;
    if (left.[MEM_HEADER_SIZE] <=! n + MEM_HEADER) return left + MEM_HEADER;

    right = left + MEM_HEADER + n;
    right{MEM_HEADER_USED} = FALSE;
    right.[MEM_HEADER_SIZE] = left.[MEM_HEADER_SIZE] - n - MEM_HEADER;
    right.[MEM_HEADER_NEXT] = left.[MEM_HEADER_NEXT];
    right.[MEM_HEADER_PREV] = left;
    left.[MEM_HEADER_SIZE] = n;
    left.[MEM_HEADER_NEXT] = right;

    format(print, "malloc(%uB)\n", n);
    return left + MEM_HEADER;
}

function free(p)
{
    if (!p) return;
    p -= MEM_HEADER;

    format(print, "free(%uB)\n", p.[MEM_HEADER_SIZE]);

    p{MEM_HEADER_USED} = FALSE;
    if (p.[MEM_HEADER_PREV] and !p.[MEM_HEADER_PREV]{MEM_HEADER_USED})
    {
        p.[MEM_HEADER_PREV].[MEM_HEADER_SIZE] += p.[MEM_HEADER_SIZE] + MEM_HEADER;
        p.[MEM_HEADER_PREV].[MEM_HEADER_NEXT] = p.[MEM_HEADER_NEXT];
        p = p.[MEM_HEADER_PREV];
        if (p.[MEM_HEADER_NEXT]) p.[MEM_HEADER_NEXT].[MEM_HEADER_PREV] = p;
    }

    if (p.[MEM_HEADER_NEXT] and !p.[MEM_HEADER_NEXT]{MEM_HEADER_USED})
    {
        p.[MEM_HEADER_SIZE] += p.[MEM_HEADER_NEXT].[MEM_HEADER_SIZE] + MEM_HEADER;
        p.[MEM_HEADER_NEXT] = p.[MEM_HEADER_NEXT].[MEM_HEADER_NEXT];
        p.[MEM_HEADER_NEXT].[MEM_HEADER_PREV] = p;
    }
}

function realloc(p, n)
(new)
{
    new = malloc(n);
    if (!new) return NULL;
    memcpy(new, p, p.[-MEM_HEADER + MEM_HEADER_SIZE]);
    free(p);
    return new;
}