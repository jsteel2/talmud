function tx_packet(data, size)
{
    # if nic_tx_packet returns false, we should buffer it or something
    # also nic_tx_packet frees the data so only call this with malloc'd pointers
    nic_tx_packet(data, size);
    return TRUE;
}

function rx_packet(data, size)
{
    return nic_rx_packet(data, size);
}

global net_task_clean_old;
function net_task_clean(t)
{
    udp_unbind_task(t);
    icmp_unbind_task(t);
    tcp_close_task(t);
    if (net_task_clean_old) net_task_clean_old(t);
}

function net_main()
(data{1518}, size)
{
    net_task_clean_old = task_clean;
    task_clean = net_task_clean;
    new_task("DHCP", dhcp_configure, 0);
    if (!arp_init()) return print("Could not init ARP\n");
    if (!udp_init()) return print("Could not init UDP\n");
    if (!icmp_init()) return print("Could not init ICMP\n");
    if (!tcp_init()) return print("Could not init TCP\n");
    while (TRUE)
    {
        while (rx_packet(data, &size))
        {
            eth_frame_handle(data, size);
            next_task();
        }
        wait();
    }
}