struct ETHERNET_HEADER = 6{ETHERNET_DEST_MAC}, 6{ETHERNET_SRC_MAC}, <ETHERNET_TYPE>;

function eth_frame_alloc(src, dest, type, length)
(p)
{
    p = malloc_task(ETHERNET_HEADER + length, net_task);
    if (!p) return NULL;
    p.[ETHERNET_DEST_MAC] = dest.[0];
    p.<ETHERNET_DEST_MAC + 4> = dest.<4>;
    p.[ETHERNET_SRC_MAC] = src.[0];
    p.<ETHERNET_SRC_MAC + 4> = src.<4>;
    p.<ETHERNET_TYPE> = swap16(type);
    return p + ETHERNET_HEADER;
}

function eth_frame_tx(frame, length) return tx_packet(frame - ETHERNET_HEADER, length + ETHERNET_HEADER);

function eth_frame_handle(frame, length)
{
    if (swap16(frame.<ETHERNET_TYPE>) == ETHERTYPE_IPV4) return ipv4_packet_handle(frame + ETHERNET_HEADER, length - ETHERNET_HEADER);
    if (swap16(frame.<ETHERNET_TYPE>) == ETHERTYPE_ARP) return arp_packet_handle(frame + ETHERNET_HEADER);
}

broadcast_mac: DD 0xFFFFFFFF DW 0xFFFF
null_mac: DD 0 DW 0