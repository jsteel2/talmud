struct DHCP_HEADER = {DHCP_OP}, {DHCP_HTYPE}, {DHCP_HLEN}, {DHCP_HOPS}, [DHCP_XID], <DHCP_SECS>, <DHCP_FLAGS>, [DHCP_CIADDR], [DHCP_YIADDR], [DHCP_SIADDR], [DHCP_GIADDR], 16{DHCP_CHADDR}, 64{DHCP_SNAME}, 128{DHCP_FILE}, [DHCP_COOKIE];
struct DHCP_MESSAGE = DHCP_HEADER{DHCP_MESSAGE_HEADER}, {DHCP_DMT_TYPE}, {DHCP_DMT_LENGTH}, {DHCP_DMT};
struct DHCP_DISCOVER = DHCP_MESSAGE{DHCP_DISCOVER_MESSAGE}, {DHCP_PRL_TYPE}, {DHCP_PRL_LENGTH}, 3{DHCP_PRL}, {DHCP_DISCOVER_END};
const BOOTREQUEST = 1, BOOTREPLY = 2, DHCP_COOKIE_VAL = 0x63538263, HTYPE_ETHERNET = 1, HLEN_ETHERNET = 6, DHCP_OPTION_SUBNETMASK = 1, DHCP_OPTION_ROUTER = 3, DHCP_OPTION_DNS = 6, DHCP_OPTION_DOMAIN_NAME = 15, DHCP_OPTION_MSGTYPE = 53, DHCP_MSGTYPE_DISCOVER = 1, DHCP_OPTION_PARAMLIST = 55;

function dhcp_send_discover(xid)
(p)
{
    p = udp_packet_alloc(0, 0xFFFFFFFF, 68, 67, DHCP_DISCOVER);
    if (!p) return FALSE;
    p{DHCP_OP} = BOOTREQUEST;
    p{DHCP_HTYPE} = HTYPE_ETHERNET;
    p{DHCP_HLEN} = HLEN_ETHERNET;
    p{DHCP_HOPS} = 0;
    p.[DHCP_XID] = swap32(xid);
    p.<DHCP_SECS> = 0;
    p.<DHCP_FLAGS> = 0;
    p.[DHCP_CIADDR] = 0;
    p.[DHCP_YIADDR] = 0;
    p.[DHCP_SIADDR] = 0;
    p.[DHCP_GIADDR] = 0;
    memcpy(&p{DHCP_CHADDR}, mac, 6);
    p.[DHCP_COOKIE] = DHCP_COOKIE_VAL;
    p{DHCP_DMT_TYPE} = DHCP_OPTION_MSGTYPE;
    p{DHCP_DMT_LENGTH} = 1;
    p{DHCP_DMT} = DHCP_MSGTYPE_DISCOVER;
    p{DHCP_PRL_TYPE} = DHCP_OPTION_PARAMLIST;
    p{DHCP_PRL_LENGTH} = 3;
    p{DHCP_PRL} = DHCP_OPTION_SUBNETMASK;
    p{DHCP_PRL + 1} = DHCP_OPTION_ROUTER;
    p{DHCP_PRL + 2} = DHCP_OPTION_DNS;
    p{DHCP_DISCOVER_END} = 0xFF;
    return udp_packet_tx(p, DHCP_DISCOVER);
}

function dhcp_configure()
{
    if (!dhcp_send_discover(0x8008135)) return print("DHCP Send Discover failed\n");
}