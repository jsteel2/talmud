const IPV4_PROTO_TCP = 6;
struct TCP_HEADER = <TCP_SOURCE>, <TCP_DEST>, [TCP_SEQ], [TCP_ACK], {TCP_DATA_OFFSET}, {TCP_FLAGS}, <TCP_WINDOW_SIZE>, <TCP_CHECKSUM>, <TCP_URGENT>;
struct TCP_PSEUDO_HEADER = [TCP_PSEUDO_SOURCE], [TCP_PSEUDO_DEST], {TCP_PSEUDO_ZERO}, {TCP_PSEUDO_PROTO}, <TCP_PSEUDO_LENGTH>;
const TCP_FLAG_FIN = 1, TCP_FLAG_SYN = 2, TCP_FLAG_RST = 4, TCP_FLAG_PSH = 8, TCP_FLAG_ACK = 16;
enum TCP_STATE_CLOSED, TCP_STATE_LISTEN, TCP_STATE_SYN_SENT, TCP_STATE_SYN_RECEIVED, TCP_STATE_ESTABLISHED;

function tcp_packet_alloc(dest, src_port, dest_port, seq, ack, flags, window, length)
(p)
{
    p = ipv4_packet_alloc(ipv4_addr, dest, IPV4_PROTO_TCP, TCP_HEADER + length);
    if (!p) return NULL;
    p.<TCP_SOURCE> = swap16(src_port);
    p.<TCP_DEST> = swap16(dest_port);
    p.[TCP_SEQ] = swap32(seq);
    p.[TCP_ACK] = swap32(ack);
    p{TCP_DATA_OFFSET} = (TCP_HEADER /! 4) << 4;
    p{TCP_FLAGS} = flags;
    p.<TCP_WINDOW_SIZE> = swap16(window);
    p.<TCP_CHECKSUM> = 0;
    p.<TCP_URGENT> = 0;
    return p + TCP_HEADER;
}

function tcp_packet_tx(packet, length)
{
    packet -= TCP_HEADER;
    packet.<TCP_CHECKSUM> = tcp_checksum(packet, length += TCP_HEADER);
    return ipv4_packet_tx(packet, length);
}

function tcp_checksum(packet, length)
(p{TCP_PSEUDO_HEADER}, sum, n)
{
    p.[TCP_PSEUDO_SOURCE] = packet.[IPV4_SRC - IPV4_HEADER];
    p.[TCP_PSEUDO_DEST] = packet.[IPV4_DEST - IPV4_HEADER];
    p{TCP_PSEUDO_ZERO} = 0;
    p{TCP_PSEUDO_PROTO} = IPV4_PROTO_TCP;
    p.<TCP_PSEUDO_LENGTH> = swap16(length);
    sum = 0;
    n = TCP_PSEUDO_HEADER;
    while (n >! 1)
    {
        sum += p.<n -= 2>;
    }
    while (length >! 1) 
    {
        sum += packet.<0>;
        packet += 2;
        length -= 2;
    }
    if (length) sum += packet{0};
    sum = (sum >> 16) + (sum & 0xFFFF);
    sum += sum >> 16;
    return ~sum & 0xFFFF;
}

global tcp_connections{MAP}, tcp_listening{MAP};
const TCP_SOCK_RECV_SIZE = 65536;
struct TCP_IDENT = <TCP_IDENT_PORT>, [TCP_IDENT_DEST_IP], <TCP_IDENT_DEST_PORT>;
struct TCP_SOCK = TCP_IDENT{TCP_SOCK_IDENT}, [TCP_SOCK_TASK], {TCP_SOCK_STATE}, [TCP_SOCK_SEQ], [TCP_SOCK_SEQ_UNA], [TCP_SOCK_ACK], [TCP_SOCK_RECV_READ], [TCP_SOCK_RECV_WRITE], TCP_SOCK_RECV_SIZE{TCP_SOCK_RECV};
struct TCP_SOCKL = TCP_IDENT{TCP_SOCK_IDENT}, [TCP_SOCKL_TASK], {TCP_SOCKL_STATE}, [TCP_SOCKL_BACKLOG_LEN], [TCP_SOCKL_BACKLOG_SIZE];

function tcpcmp(x, y) return memcmp(*x, *y, TCP_IDENT);

function hashtcp(x)
(s{STRING})
{
    s.[STRINGPTR] = *x;
    s.[STRINGLEN] = TCP_IDENT;
    return hash_string(s);
}

function tcplcmp(x, y) return x[0]<0> == y[0]<0>;
function hashtcpl(x) return x[0]<0>;

function tcp_init()
{
    return map_init(tcp_connections, 64, 4, 0, tcpcmp, hashtcp, NULL) and map_init(tcp_listening, 16, 4, 0, tcplcmp, hashtcpl, NULL);
}

function tcp_close_task(task)
(state)
{
    state = 0;
    while (map_iter(tcp_connections, &state))
    {
        if (state.[0].[TCP_SOCK_TASK] == task) tcp_close(state.[0]);
    }
    state = 0;
    while (map_iter(tcp_listening, &state))
    {
        if (state.[0].[TCP_SOCK_TASK] == task) tcp_close(state.[0]);
    }
}

function tcp_send_packet(sock, flags, data, len)
(p)
{
    p = tcp_packet_alloc(sock.[TCP_IDENT_DEST_IP], sock.<TCP_IDENT_PORT>, sock.<TCP_IDENT_DEST_PORT>, sock.[TCP_SOCK_SEQ], sock.[TCP_SOCK_ACK], flags, (sock.[TCP_SOCK_RECV_READ] - sock.[TCP_SOCK_RECV_WRITE] - 1 + TCP_SOCK_RECV_SIZE) %! TCP_SOCK_RECV_SIZE, len);
    if (!p) return;
    memcpy(p, data, len);
    tcp_packet_tx(p, len);
    # todo buffer packet to resend if they have to be (flags & (SYN | FIN) or len != 0)
    # handle buffered packets in net_task and remove them out of the buffer on ACK
}

function tcp_connect(ip, port)
(sock)
{
    sock = malloc(TCP_SOCK);
    if (!sock) return NULL;
    sock.[TCP_IDENT_DEST_IP] = ip;
    sock.<TCP_IDENT_DEST_PORT> = port;
    do sock.<TCP_IDENT_PORT> = rand() & 0xFFFE; while (map_ref(tcp_connections, &sock, NULL));
    sock.[TCP_SOCK_TASK] = task;
    if (!map_set(tcp_connections, &sock, &sock))
    {
        free(sock);
        return NULL;
    }
    sock.[TCP_SOCK_SEQ_UNA] = rand();
    sock.[TCP_SOCK_ACK] = 0;
    sock.[TCP_SOCK_RECV_READ] = 0;
    sock.[TCP_SOCK_RECV_WRITE] = 0;
    tcp_send_packet(sock, TCP_FLAG_SYN, NULL, 0);
    sock{TCP_SOCK_STATE} = TCP_STATE_SYN_SENT;
    do
    {
        # todo add timeout
        wait();
    } while (sock{TCP_SOCK_STATE} != TCP_STATE_ESTABLISHED and sock{TCP_SOCK_STATE} != TCP_STATE_CLOSED);
    return sock;
}

function tcp_listen(port, backlog)
(sock)
{
    sock = malloc(TCP_SOCKL + backlog *! 4);
    if (!sock) return NULL;
    sock.<TCP_IDENT_PORT> = port;
    sock.[TCP_IDENT_DEST_IP] = 0;
    sock.<TCP_IDENT_DEST_PORT> = 0;
    sock.[TCP_SOCK_TASK] = task;
    sock.[TCP_SOCKL_BACKLOG_SIZE] = backlog;
    sock.[TCP_SOCKL_BACKLOG_LEN] = 0;
    if (!map_set(tcp_listening, &sock, &sock))
    {
        free(sock);
        return NULL;
    }
    sock{TCP_SOCK_STATE} = TCP_STATE_LISTEN;
    return sock;
}

function tcp_accept(s)
(x)
{
    while (!s.[TCP_SOCKL_BACKLOG_LEN])
    {
        wait();
    }
    x = s.[TCP_SOCKL];
    s.[TCP_SOCKL_BACKLOG_LEN] -= 1;
    memcpyd(&s{TCP_SOCKL}, &s{TCP_SOCKL + 4}, s.[TCP_SOCKL_BACKLOG_LEN]);
    # todo add timeout?? or try others in backlog?
    while (x{TCP_SOCK_STATE} != TCP_STATE_ESTABLISHED and x{TCP_SOCK_STATE} != TCP_STATE_CLOSED)
    {
        wait();
    }
    return x;
}

function tcp_close(sock)
{
    # todo close gracefully
    tcp_send_packet(sock, TCP_FLAG_ACK | TCP_FLAG_RST, NULL, 0);
    if (!map_del(tcp_connections, &sock)) map_del(tcp_listening, &sock.<TCP_IDENT_PORT>);
    if (sock{TCP_SOCK_STATE} == TCP_STATE_LISTEN)
    {
        while (sock.[TCP_SOCKL_BACKLOG_LEN]) tcp_close(sock.[TCP_SOCKL + (sock.[TCP_SOCKL_BACKLOG_LEN] -= 1) *! 4]);
    }
    free(sock);
}

function tcp_recv(sock, buf, len)
(x)
{
    if (!len) return 0;
    while (sock.[TCP_SOCK_RECV_READ] == sock.[TCP_SOCK_RECV_WRITE] and sock{TCP_SOCK_STATE} != TCP_STATE_CLOSED)
    {
        # todo add timeout
        wait();
    }
    len = minu(len, (sock.[TCP_SOCK_RECV_WRITE] + TCP_SOCK_RECV_SIZE - sock.[TCP_SOCK_RECV_READ]) %! TCP_SOCK_RECV_SIZE);
    x = minu(TCP_SOCK_RECV_SIZE - sock.[TCP_SOCK_RECV_READ], len);
    memcpy(buf, &sock{TCP_SOCK_RECV + sock.[TCP_SOCK_RECV_READ]}, x);
    if (len >! x) memcpy(&buf{x}, &sock{TCP_SOCK_RECV}, len - x);
    sock.[TCP_SOCK_RECV_READ] = (sock.[TCP_SOCK_RECV_READ] + len) %! TCP_SOCK_RECV_SIZE;
    return len;
}

function tcp_canrecv(sock) return sock.[TCP_SOCK_RECV_READ] != sock.[TCP_SOCK_RECV_WRITE];

function tcp_recvall(s, buf, len)
(x)
{
    while (len)
    {
        len -= x = tcp_recv(s, buf, len);
        if (!x) return FALSE;
        buf += x;
    }
    return TRUE;
}

function tcp_recvuntil(s, buf, len, c)
(x, i)
{
    x = len;
    while (len)
    {
        len -= i = tcp_recv(s, buf, 1);
        if (!i) return x - len;
        if (buf{0} == c) break;
        buf += 1;
    }
    return x - len;
}

function tcp_send(sock, buf, len)
(x, b)
{
    # todo wait+timeout if recipient window is full (only wait if no data was sent (?))
    if (sock{TCP_SOCK_STATE} == TCP_STATE_CLOSED) return 0;
    b = len;
    while (len)
    {
        x = minu(len, 1460);
        tcp_send_packet(sock, TCP_FLAG_PSH | TCP_FLAG_ACK, buf, x);
        sock.[TCP_SOCK_SEQ] += x;
        buf += x;
        len -= x;
    }
    return b - len;
}

function tcp_sends(sock, s) return tcp_send(sock, s.[STRINGPTR], s.[STRINGLEN]);

function tcp_packet_handle(packet, length)
(ident{TCP_IDENT}, x, sock, ack)
{
    ident.<TCP_IDENT_PORT> = swap16(packet.<TCP_DEST>);
    ident.<TCP_IDENT_DEST_PORT> = swap16(packet.<TCP_SOURCE>);
    ident.[TCP_IDENT_DEST_IP] = swap32(packet.[IPV4_SRC - IPV4_HEADER]);
    x = ident;
    if (!(sock = map_ref(tcp_connections, &x, NULL)) and !(sock = map_ref(tcp_listening, &x, NULL))) return;
    sock = *sock;

    if (sock{TCP_SOCK_STATE} == TCP_STATE_CLOSED) return;

    if (sock{TCP_SOCK_STATE} == TCP_STATE_LISTEN)
    {
        if (!(packet{TCP_FLAGS} & TCP_FLAG_SYN) or sock.[TCP_SOCKL_BACKLOG_LEN] == sock.[TCP_SOCKL_BACKLOG_SIZE])
        {
            # todo send ACK (?) | RST
            return;
        }
        x = malloc(TCP_SOCK);
        if (!x) return;
        x.<TCP_IDENT_PORT> = ident.<TCP_IDENT_PORT>;
        x.<TCP_IDENT_DEST_PORT> = ident.<TCP_IDENT_DEST_PORT>;
        x.[TCP_IDENT_DEST_IP] = ident.[TCP_IDENT_DEST_IP];
        if (!map_set(tcp_connections, &x, &x))
        {
            free(x);
            return NULL;
        }
        x.[TCP_SOCK_TASK] = sock.[TCP_SOCK_TASK];
        x.[TCP_SOCK_ACK] = swap32(packet.[TCP_SEQ]) + 1;
        x.[TCP_SOCK_SEQ_UNA] = rand();
        x.[TCP_SOCK_RECV_READ] = 0;
        x.[TCP_SOCK_RECV_WRITE] = 0;
        tcp_send_packet(x, TCP_FLAG_SYN | TCP_FLAG_ACK, NULL, 0);
        x{TCP_SOCK_STATE} = TCP_STATE_SYN_RECEIVED;
        sock.[TCP_SOCKL + sock.[TCP_SOCKL_BACKLOG_LEN] *! 4] = x;
        sock.[TCP_SOCKL_BACKLOG_LEN] += 1;
        sock.[TCP_SOCK_TASK]{TASK_WAIT} = FALSE;
        return;
    }

    ack = FALSE;
    if (packet{TCP_FLAGS} & TCP_FLAG_SYN)
    {
        sock.[TCP_SOCK_ACK] = swap32(packet.[TCP_SEQ]) + 1;
        ack = TRUE;
    }

    if (packet{TCP_FLAGS} & TCP_FLAG_ACK)
    {
        # todo check if ack is acceptable
        sock.[TCP_SOCK_SEQ_UNA] = swap32(packet.[TCP_ACK]);
        if ((sock{TCP_SOCK_STATE} == TCP_STATE_SYN_SENT and packet{TCP_FLAGS} & TCP_FLAG_SYN) or sock{TCP_SOCK_STATE} == TCP_STATE_SYN_RECEIVED)
        {
            sock.[TCP_SOCK_SEQ] = sock.[TCP_SOCK_SEQ_UNA]; # ???
            sock{TCP_SOCK_STATE} = TCP_STATE_ESTABLISHED;
            sock.[TCP_SOCK_TASK]{TASK_WAIT} = FALSE;
        }
    }

    if ((length -= (packet{TCP_DATA_OFFSET} >> 4) *! 4) >$ 0)
    {
        # todo check if seq is acceptable
        if (sock.[TCP_SOCK_ACK] == swap32(packet.[TCP_SEQ])) # is that seq check correct?
        {
            length = minu(length, (sock.[TCP_SOCK_RECV_READ] + TCP_SOCK_RECV_SIZE - sock.[TCP_SOCK_RECV_WRITE] - 1) %! TCP_SOCK_RECV_SIZE);
            x = minu(TCP_SOCK_RECV_SIZE - sock.[TCP_SOCK_RECV_WRITE], length);
            memcpy(&sock{TCP_SOCK_RECV + sock.[TCP_SOCK_RECV_WRITE]}, &packet{TCP_HEADER}, x);
            if (length >! x) memcpy(&sock{TCP_SOCK_RECV}, &packet{TCP_HEADER + x}, length - x);
            sock.[TCP_SOCK_RECV_WRITE] = (sock.[TCP_SOCK_RECV_WRITE] + length) %! TCP_SOCK_RECV_SIZE;
            sock.[TCP_SOCK_ACK] += length;
            sock.[TCP_SOCK_TASK]{TASK_WAIT} = FALSE;
        }
        ack = TRUE;
    }

    if (packet{TCP_FLAGS} & TCP_FLAG_FIN)
    {
        # not proper lol
        sock{TCP_SOCK_STATE} = TCP_STATE_CLOSED;
        sock.[TCP_SOCK_ACK] += 1;
        ack = TRUE;
        sock.[TCP_SOCK_TASK]{TASK_WAIT} = FALSE;
    }
    
    if (ack) tcp_send_packet(sock, TCP_FLAG_ACK, NULL, 0);
}