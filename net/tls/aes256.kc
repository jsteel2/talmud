struct AES256_CTX = 240{AES256_CTX_ROUNDKEY}, 16{AES256_CTX_IV};

aes256_sbox: DB 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16

aes256_rsbox: DB  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d

aes256_rcon: DB 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36

function aes256_key_expansion(roundkey, key)
(i, j, k, tempa{4}, u8tmp)
{
    memcpyd(roundkey, key, 8);

    i = 8;
    while (i <! 4 *! (14 + 1))
    {
        k = (i - 1) *! 4;
        tempa{0} = roundkey{k};
        tempa{1} = roundkey{k + 1};
        tempa{2} = roundkey{k + 2};
        tempa{3} = roundkey{k + 3};
        if (i %! 8 == 0)
        {
            u8tmp = tempa{0};
            tempa{0} = tempa{1};
            tempa{1} = tempa{2};
            tempa{2} = tempa{3};
            tempa{3} = u8tmp;
            tempa{0} = aes256_sbox{tempa{0}};
            tempa{1} = aes256_sbox{tempa{1}};
            tempa{2} = aes256_sbox{tempa{2}};
            tempa{3} = aes256_sbox{tempa{3}};
            tempa{0} = tempa{0} ^ aes256_rcon{i /! 8};
        }
        if (i %! 8 == 4)
        {
            tempa{0} = aes256_sbox{tempa{0}};
            tempa{1} = aes256_sbox{tempa{1}};
            tempa{2} = aes256_sbox{tempa{2}};
            tempa{3} = aes256_sbox{tempa{3}};
        }
        j = i *! 4;
        k = (i - 8) *! 4;
        roundkey{j} = roundkey{k} ^ tempa{0};
        roundkey{j + 1} = roundkey{k + 1} ^ tempa{1};
        roundkey{j + 2} = roundkey{k + 2} ^ tempa{2};
        roundkey{j + 3} = roundkey{k + 3} ^ tempa{3};
        i += 1;
    }
}

function aes256_init_ctx(ctx, key) aes256_key_expansion(&ctx{AES256_CTX_ROUNDKEY}, key);

function aes256_init_ctx_iv(ctx, key, iv)
{
    aes256_key_expansion(&ctx{AES256_CTX_ROUNDKEY}, key);
    memcpy(&ctx{AES256_CTX_IV}, iv, 16);
}

function aes256_ctx_set_iv(ctx, iv) memcpy(&ctx{AES256_CTX_IV}, iv, 16);

function aes256_add_roundkey(round, state, roundkey)
(i, j)
{
    i = 0;
    while (i <! 4)
    {
        j = 0;
        while (j <! 4)
        {
            state{i *! 4 + j} ^= roundkey{round *! 4 *! 4 + i *! 4 + j};
            j += 1;
        }
        i += 1;
    }
}

function aes256_sub_bytes(state)
(i, j)
{
    i = 0;
    while (i <! 4)
    {
        j = 0;
        while (j <! 4)
        {
            state{j *! 4 + i} = aes256_sbox{state{j *! 4 + i}};
            j += 1;
        }
        i += 1;
    }
}

function aes256_shift_rows(state)
(temp)
{
    temp = state{0 *! 4 + 1};
    state{0 *! 4 + 1} = state{1 *! 4 + 1};
    state{1 *! 4 + 1} = state{2 *! 4 + 1};
    state{2 *! 4 + 1} = state{3 *! 4 + 1};
    state{3 *! 4 + 1} = temp;

    temp = state{0 *! 4 + 2};
    state{0 *! 4 + 2} = state{2 *! 4 + 2};
    state{2 *! 4 + 2} = temp;

    temp = state{1 *! 4 + 2};
    state{1 *! 4 + 2} = state{3 *! 4 + 2};
    state{3 *! 4 + 2} = temp;

    temp = state{0 *! 4 + 3};
    state{0 *! 4 + 3} = state{3 *! 4 + 3};
    state{3 *! 4 + 3} = state{2 *! 4 + 3};
    state{2 *! 4 + 3} = state{1 *! 4 + 3};
    state{1 *! 4 + 3} = temp;
}

function aes256_xtime(x) return ((x << 1) ^ (((x >> 7) & 1) *! 0x1B));

function aes256_mix_columns(state)
(i, tmp, tm, t)
{
    i = 0;
    while (i <! 4)
    {
        t = state{i *! 4 + 0};
        tmp = state{i *! 4 + 0} ^ state{i *! 4 + 1} ^ state{i *! 4 + 2} ^ state{i *! 4 + 3};
        tm = state{i *! 4 + 0} ^ state{i *! 4 + 1};
        tm = aes256_xtime(tm);
        state{i *! 4 + 0} ^= tm ^ tmp;
        tm = state{i *! 4 + 1} ^ state{i *! 4 + 2};
        tm = aes256_xtime(tm);
        state{i *! 4 + 1} ^= tm ^ tmp;
        tm = state{i *! 4 + 2} ^ state{i *! 4 + 3};
        tm = aes256_xtime(tm);
        state{i *! 4 + 2} ^= tm ^ tmp;
        tm = state{i *! 4 + 3} ^ t;
        tm = aes256_xtime(tm);
        state{i *! 4 + 3} ^= tm ^ tmp;
        i += 1;
    }
}

function aes256_inv_mix_columns(state)
(i, a, b, c, d)
{
    i = 0;
    while (i <! 4)
    {
        a = state{i *! 4};
        b = state{i *! 4 + 1};
        c = state{i *! 4 + 2};
        d = state{i *! 4 + 3};

        state{i *! 4} = ((a *! (0x0e & 1)) ^ (aes256_xtime(a) *! ((0x0e >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(a)) *! ((0x0e >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(a))) *! ((0x0e >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(a)))) *! ((0x0e >> 4) & 1))) ^
                    ((b *! (0x0b & 1)) ^ (aes256_xtime(b) *! ((0x0b >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(b)) *! ((0x0b >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(b))) *! ((0x0b >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(b)))) *! ((0x0b >> 4) & 1))) ^
                    ((c *! (0x0d & 1)) ^ (aes256_xtime(c) *! ((0x0d >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(c)) *! ((0x0d >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(c))) *! ((0x0d >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(c)))) *! ((0x0d >> 4) & 1))) ^
                    ((d *! (0x09 & 1)) ^ (aes256_xtime(d) *! ((0x09 >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(d)) *! ((0x09 >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(d))) *! ((0x09 >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(d)))) *! ((0x09 >> 4) & 1)));

        state{i *! 4 + 1} = ((a *! (0x09 & 1)) ^ (aes256_xtime(a) *! ((0x09 >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(a)) *! ((0x09 >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(a))) *! ((0x09 >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(a)))) *! ((0x09 >> 4) & 1))) ^
                    ((b *! (0x0e & 1)) ^ (aes256_xtime(b) *! ((0x0e >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(b)) *! ((0x0e >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(b))) *! ((0x0e >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(b)))) *! ((0x0e >> 4) & 1))) ^
                    ((c *! (0x0b & 1)) ^ (aes256_xtime(c) *! ((0x0b >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(c)) *! ((0x0b >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(c))) *! ((0x0b >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(c)))) *! ((0x0b >> 4) & 1))) ^
                    ((d *! (0x0d & 1)) ^ (aes256_xtime(d) *! ((0x0d >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(d)) *! ((0x0d >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(d))) *! ((0x0d >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(d)))) *! ((0x0d >> 4) & 1)));

        state{i *! 4 + 2} = ((a *! (0x0d & 1)) ^ (aes256_xtime(a) *! ((0x0d >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(a)) *! ((0x0d >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(a))) *! ((0x0d >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(a)))) *! ((0x0d >> 4) & 1))) ^
                    ((b *! (0x09 & 1)) ^ (aes256_xtime(b) *! ((0x09 >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(b)) *! ((0x09 >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(b))) *! ((0x09 >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(b)))) *! ((0x09 >> 4) & 1))) ^
                    ((c *! (0x0e & 1)) ^ (aes256_xtime(c) *! ((0x0e >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(c)) *! ((0x0e >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(c))) *! ((0x0e >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(c)))) *! ((0x0e >> 4) & 1))) ^
                    ((d *! (0x0b & 1)) ^ (aes256_xtime(d) *! ((0x0b >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(d)) *! ((0x0b >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(d))) *! ((0x0b >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(d)))) *! ((0x0b >> 4) & 1)));

        state{i *! 4 + 3} = ((a *! (0x0b & 1)) ^ (aes256_xtime(a) *! ((0x0b >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(a)) *! ((0x0b >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(a))) *! ((0x0b >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(a)))) *! ((0x0b >> 4) & 1))) ^
                    ((b *! (0x0d & 1)) ^ (aes256_xtime(b) *! ((0x0d >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(b)) *! ((0x0d >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(b))) *! ((0x0d >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(b)))) *! ((0x0d >> 4) & 1))) ^
                    ((c *! (0x09 & 1)) ^ (aes256_xtime(c) *! ((0x09 >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(c)) *! ((0x09 >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(c))) *! ((0x09 >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(c)))) *! ((0x09 >> 4) & 1))) ^
                    ((d *! (0x0e & 1)) ^ (aes256_xtime(d) *! ((0x0e >> 1) & 1)) ^
                     (aes256_xtime(aes256_xtime(d)) *! ((0x0e >> 2) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(d))) *! ((0x0e >> 3) & 1)) ^
                     (aes256_xtime(aes256_xtime(aes256_xtime(aes256_xtime(d)))) *! ((0x0e >> 4) & 1)));
        i += 1;
    }
}

function aes256_inv_sub_bytes(state)
(i, j)
{
    i = 0;
    while (i <! 4)
    {
        j = 0;
        while (j <! 4)
        {
            state{j *! 4 + i} = aes256_rsbox{state{j *! 4 + i}};
            j += 1;
        }
        i += 1;
    }
}

function aes256_inv_shift_rows(state)
(temp)
{
    temp = state{3 *! 4 + 1};
    state{3 *! 4 + 1} = state{2 *! 4 + 1};
    state{2 *! 4 + 1} = state{1 *! 4 + 1};
    state{1 *! 4 + 1} = state{0 *! 4 + 1};
    state{0 *! 4 + 1} = temp;

    temp = state{0 *! 4 + 2};
    state{0 *! 4 + 2} = state{2 *! 4 + 2};
    state{2 *! 4 + 2} = temp;

    temp = state{1 *! 4 + 2};
    state{1 *! 4 + 2} = state{3 *! 4 + 2};
    state{3 *! 4 + 2} = temp;

    temp = state{0 *! 4 + 3};
    state{0 *! 4 + 3} = state{1 *! 4 + 3};
    state{1 *! 4 + 3} = state{2 *! 4 + 3};
    state{2 *! 4 + 3} = state{3 *! 4 + 3};
    state{3 *! 4 + 3} = temp;
}

function aes256_cipher(state, roundkey)
(round)
{
    aes256_add_roundkey(0, state, roundkey);

    round = 1;
    while (TRUE)
    {
        aes256_sub_bytes(state);
        aes256_shift_rows(state);
        if (round == 14) break;
        aes256_mix_columns(state);
        aes256_add_roundkey(round, state, roundkey);
        round += 1;
    }
    aes256_add_roundkey(14, state, roundkey);
}

function aes256_inv_cipher(state, roundkey)
(round)
{
    aes256_add_roundkey(14, state, roundkey);

    round = 14 - 1;
    while (TRUE)
    {
        aes256_inv_shift_rows(state);
        aes256_inv_sub_bytes(state);
        aes256_add_roundkey(round, state, roundkey);
        if (round == 0) break;
        aes256_inv_mix_columns(state);
        round -= 1;
    }
}

function aes256_xor_with_iv(buf, iv)
(i)
{
    i = 0;
    while (i <! 16)
    {
        buf{i} ^= iv{i};
        i += 1;
    }
}

function aes256_cbc_encrypt_buffer(ctx, buf, length)
(i, iv)
{
    i = 0;
    iv = &ctx{AES256_CTX_IV};
    while (i <! length)
    {
        aes256_xor_with_iv(buf, iv);
        aes256_cipher(buf, &ctx{AES256_CTX_ROUNDKEY});
        iv = buf;
        buf += 16;
        i += 16;
    }
    memcpy(&ctx{AES256_CTX_IV}, iv, 16);
}

function aes256_cbc_decrypt_buffer(ctx, buf, length)
(i, iv{16})
{
    i = 0;
    while (i <! length)
    {
        memcpy(iv, buf, 16);
        aes256_inv_cipher(buf, &ctx{AES256_CTX_ROUNDKEY});
        aes256_xor_with_iv(buf, &ctx{AES256_CTX_IV});
        memcpy(&ctx{AES256_CTX_IV}, iv, 16);
        buf += 16;
        i += 16;
    }
}