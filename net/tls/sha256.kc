const SHA256_CHUNK_SIZE = 64, SHA256_TOTAL_LEN_LEN = 8;

sha256_k: DD 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2

sha256_h: DD 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19

struct SHA256_BUFFER_STATE = [SHA256_BUFFER_STATE_P], [SHA256_BUFFER_STATE_LEN], [SHA256_BUFFER_STATE_TOTAL_LEN], {SHA256_BUFFER_STATE_SINGLE_ONE_DELIVERED}, {SHA256_BUFFER_STATE_TOTAL_LEN_DELIVERED};

function sha256_right_rot(value, count) return (value >> count) | (value << (32 - count));

function sha256_init_buf_state(state, input, len)
{
    state.[SHA256_BUFFER_STATE_P] = input;
    state.[SHA256_BUFFER_STATE_LEN] = len;
    state.[SHA256_BUFFER_STATE_TOTAL_LEN] = len;
    state{SHA256_BUFFER_STATE_SINGLE_ONE_DELIVERED} = FALSE;
    state{SHA256_BUFFER_STATE_TOTAL_LEN_DELIVERED} = FALSE;
}

function sha256_calc_chunk(chunk, state)
(space_in_chunk, left, len, i)
{
    if (state{SHA256_BUFFER_STATE_TOTAL_LEN_DELIVERED}) return FALSE;

    if (state.[SHA256_BUFFER_STATE_LEN] >=$ SHA256_CHUNK_SIZE)
    {
        memcpy(chunk, state.[SHA256_BUFFER_STATE_P], SHA256_CHUNK_SIZE);
        state.[SHA256_BUFFER_STATE_P] += SHA256_CHUNK_SIZE;
        state.[SHA256_BUFFER_STATE_LEN] -= SHA256_CHUNK_SIZE;
        return TRUE;
    }

    memcpy(chunk, state.[SHA256_BUFFER_STATE_P], state.[SHA256_BUFFER_STATE_LEN]);
    chunk += state.[SHA256_BUFFER_STATE_LEN];
    space_in_chunk = SHA256_CHUNK_SIZE - state.[SHA256_BUFFER_STATE_LEN];
    state.[SHA256_BUFFER_STATE_P] += state.[SHA256_BUFFER_STATE_LEN];
    state.[SHA256_BUFFER_STATE_LEN] = 0;

    if (!state{SHA256_BUFFER_STATE_SINGLE_ONE_DELIVERED})
    {
        chunk{0} = 0x80;
        chunk += 1;
        space_in_chunk -= 1;
        state{SHA256_BUFFER_STATE_SINGLE_ONE_DELIVERED} = TRUE;
    }

    if (space_in_chunk >=$ SHA256_TOTAL_LEN_LEN)
    {
        left = space_in_chunk - SHA256_TOTAL_LEN_LEN;
        len = state.[SHA256_BUFFER_STATE_TOTAL_LEN];
        memset(chunk, 0, left);
        chunk += left;
        chunk{7} = (len << 3);
        len >>= 5;
        i = 6;
        while (i >=$ 0)
        {
            chunk{i} = len;
            len >>= 8;
            i -= 1;
        }
        state{SHA256_BUFFER_STATE_TOTAL_LEN_DELIVERED} = TRUE;
    }
    else
    {
        memset(chunk, 0, space_in_chunk);
    }
    
    return TRUE;
}

function sha256_calc(hash, input, len)
(h[8], i, j, chunk[64], state{SHA256_BUFFER_STATE}, ah[8], p, w[16], s0, s1, ch, temp1, maj, temp2)
{
    memcpyd(h, sha256_h, 8);
    sha256_init_buf_state(state, input, len);

    while (sha256_calc_chunk(chunk, state))
    {
        p = chunk;
        memcpyd(ah, h, 8);

        i = 0;
        while (i <! 4)
        {
            j = 0;
            while (j <! 16)
            {
                if (i == 0)
                {
                    w[j] = (p{0} << 24) | (p{1} << 16) | (p{2} << 8) | p{3};
                    p += 4;
                }
                else
                {
                    s0 = sha256_right_rot(w[(j + 1) & 0xF], 7) ^ sha256_right_rot(w[(j + 1) & 0xF], 18) ^ (w[(j + 1) & 0xF] >> 3);
                    s1 = sha256_right_rot(w[(j + 14) & 0xF], 17) ^ sha256_right_rot(w[(j + 14) & 0xF], 19) ^ (w[(j + 14) & 0xF] >> 10);
                    w[j] = w[j] + s0 + w[(j + 9) & 0xF] + s1;
                }
                s1 = sha256_right_rot(ah[4], 6) ^ sha256_right_rot(ah[4], 11) ^ sha256_right_rot(ah[4], 25);
                ch = (ah[4] & ah[5]) ^ (~ah[4] & ah[6]);
                temp1 = ah[7] + s1 + ch + sha256_k[(i << 4) | j] + w[j];
                s0 = sha256_right_rot(ah[0], 2) ^ sha256_right_rot(ah[0], 13) ^ sha256_right_rot(ah[0], 22);
                maj = (ah[0] & ah[1]) ^ (ah[0] & ah[2]) ^ (ah[1] & ah[2]);
                temp2 = s0 + maj;

                ah[7] = ah[6];
                ah[6] = ah[5];
                ah[5] = ah[4];
                ah[4] = ah[3] + temp1;
                ah[3] = ah[2];
                ah[2] = ah[1];
                ah[1] = ah[0];
                ah[0] = temp1 + temp2;
                j += 1;
            }
            i += 1;
        }

        i = 0;
        while (i <! 8)
        {
            h[i] += ah[i];
            i += 1;
        }
    }

    i = 0;
    j = 0;
    while (i <! 8)
    {
        hash{j} = (h[i] >> 24);
        hash{j += 1} = (h[i] >> 16);
        hash{j += 1} = (h[i] >> 8);
        hash{j += 1} = (h[i]);
        j += 1;
        i += 1;
    }
}