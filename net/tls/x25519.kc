function x25519_add(out, a, b)
(j, u)
{
    u = 0;
    j = 0;
    while (j <! 31)
    {
        u += a[j] + b[j];
        out[j] = u & 255;
        u >>= 8;
        j += 1;
    }
    u += a[31] + b[31];
    out[31] = u;
}

function x25519_sub(out, a, b)
(j, u)
{
    u = 218;
    j = 0;
    while (j <! 31)
    {
        u += a[j] + 65280 - b[j];
        out[j] = u & 255;
        u >>= 8;
        j += 1;
    }
    u += a[31] - b[31];
    out[31] = u;
}

function x25519_squeeze(a)
(j, u)
{
    u = 0;
    j = 0;
    while (j <! 31)
    {
        u += a[j];
        a[j] = u & 255;
        u >>= 8;
        j += 1;
    }
    u += a[31];
    a[31] = u & 127;
    u = (u >> 7) *! 19;
    j = 0;
    while (j <! 31)
    {
        u += a[j];
        a[j] = u & 255;
        u >>= 8;
        j += 1;
    }
    u += a[31];
    a[31] = u;
}

x25519_minusp: DD 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128

function x25519_freeze(a)
(aorig[32], j, negative)
{
    memcpyd(aorig, a, 32);
    x25519_add(a, a, x25519_minusp);
    negative = -((a[31] >> 7) & 1);
    j = 0;
    while (j <! 32)
    {
        a[j] ^= negative & (aorig[j] ^ a[j]);
        j += 1;
    }
}

function x25519_mult(out, a, b)
(i, j, u)
{
    i = 0;
    while (i <! 32)
    {
        u = 0;
        j = 0;
        while (j <=! i)
        {
            u += a[j] *! b[i - j];
            j += 1;
        }
        j = i + 1;
        while (j <! 32)
        {
            u += a[j] *! b[i + 32 - j] *! 38;
            j += 1;
        }
        out[i] = u;
        i += 1;
    }
    x25519_squeeze(out);
}

function x25519_mult121665(out, a)
(j, u)
{
    u = 0;
    j = 0;
    while (j <! 31)
    {
        u += a[j] *! 121665;
        out[j] = u & 255;
        u >>= 8;
        j += 1;
    }
    u += a[31] *! 121665;
    out[31] = u & 127;
    u = (u >> 7) *! 19;
    j = 0;
    while (j <! 31)
    {
        u += out[j];
        out[j] = u & 255;
        u >>= 8;
        j += 1;
    }
    u += out[j];
    out[j] = u;
}

function x25519_square(out, a)
(i, j, u)
{
    i = 0;
    while (i <! 32)
    {
        u = 0;
        j = 0;
        while (j <! i - j)
        {
            u += a[j] *! a[i - j];
            j += 1;
        }
        j = i + 1;
        while (j <! i + 32 - j)
        {
            u += a[j] *! a[i + 32 - j] *! 38;
            j += 1;
        }
        u *!= 2;
        if ((i & 1) == 0)
        {
            u += a[i /! 2] *! a[i /! 2];
            u += a[i /! 2 + 16] *! a[i /! 2 + 16] *! 38;
        }
        out[i] = u;
        i += 1;
    }
    x25519_squeeze(out);
}

function x25519_select(p, q, r, s, b)
(j, t, bminus1)
{
    bminus1 = b - 1;
    j = 0;
    while (j <! 64)
    {
        t = bminus1 & (r[j] ^ s[j]);
        p[j] = s[j] ^ t;
        q[j] = r[j] ^ t;
        j += 1;
    }
}

function x25519_mainloop(work, e)
(xzm1[64], xzm[64], xzmb[64], xzm1b[64], xznb[64], xzn1b[64], a0[64], a1[64], b0[64], b1[64], c1[64], r[32], s[32], t[32], u[32], b, pos)
{
    memcpyd(xzm1, work, 32);
    xzm1[32] = 1;
    memsetd(&xzm1[33], 0, 31);

    xzm[0] = 1;
    memsetd(&xzm[1], 0, 63);

    pos = 254;
    while (pos >=$ 0)
    {
        b = e{pos /! 8} >> (pos & 7);
        b &= 1;
        x25519_select(xzmb, xzm1b, xzm, xzm1, b);
        x25519_add(a0, xzmb, &xzmb[32]);
        x25519_sub(&a0[32], xzmb, &xzmb[32]);
        x25519_add(a1, xzm1b, &xzm1b[32]);
        x25519_sub(&a1[32], xzm1b, &xzm1b[32]);
        x25519_square(b0, a0);
        x25519_square(&b0[32], &a0[32]);
        x25519_mult(b1, a1, &a0[32]);
        x25519_mult(&b1[32], &a1[32], a0);
        x25519_add(c1, b1, &b1[32]);
        x25519_sub(&c1[32], b1, &b1[32]);
        x25519_square(r, &c1[32]);
        x25519_sub(s, b0, &b0[32]);
        x25519_mult121665(t, s);
        x25519_add(u, t, b0);
        x25519_mult(xznb, b0, &b0[32]);
        x25519_mult(&xznb[32], s, u);
        x25519_square(xzn1b, c1);
        x25519_mult(&xzn1b[32], r, work);
        x25519_select(xzm, xzm1, xznb, xzn1b, b);
        pos -= 1;
    }

    memcpyd(work, xzm, 64);
}

function x25519_recip(out, z)
(z2[32], z9[32], z11[32], z2_5_0[32], z2_10_0[32], z2_20_0[32], z2_50_0[32], z2_100_0[32], t0[32], t1[32], i)
{
    x25519_square(z2, z);
    x25519_square(t1, z2);
    x25519_square(t0, t1);
    x25519_mult(z9, t0, z);
    x25519_mult(z11, z9, z2);
    x25519_square(t0, z11);
    x25519_mult(z2_5_0, t0, z9);

    x25519_square(t0, z2_5_0);
    x25519_square(t1, t0);
    x25519_square(t0, t1);
    x25519_square(t1, t0);
    x25519_square(t0, t1);
    x25519_mult(z2_10_0, t0, z2_5_0);

    x25519_square(t0, z2_10_0);
    x25519_square(t1, t0);
    i = 2;
    while (i <! 10)
    {
        x25519_square(t0, t1);
        x25519_square(t1, t0);
        i += 2;
    }
    x25519_mult(z2_20_0, t1, z2_10_0);

    x25519_square(t0, z2_20_0);
    x25519_square(t1, t0);
    i = 2;
    while (i <! 20)
    {
        x25519_square(t0, t1);
        x25519_square(t1, t0);
        i += 2;
    }
    x25519_mult(t0, t1, z2_20_0);

    x25519_square(t1, t0);
    x25519_square(t0, t1);
    i = 2;
    while (i <! 10)
    {
        x25519_square(t1, t0);
        x25519_square(t0, t1);
        i += 2;
    }
    x25519_mult(z2_50_0, t0, z2_10_0);

    x25519_square(t0, z2_50_0);
    x25519_square(t1, t0);
    i = 2;
    while (i <! 50)
    {
        x25519_square(t0, t1);
        x25519_square(t1, t0);
        i += 2;
    }
    x25519_mult(z2_100_0, t1, z2_50_0);

    x25519_square(t1, z2_100_0);
    x25519_square(t0, t1);
    i = 2;
    while (i <! 100)
    {
        x25519_square(t1, t0);
        x25519_square(t0, t1);
        i += 2;
    }
    x25519_mult(t1, t0, z2_100_0);

    x25519_square(t0, t1);
    x25519_square(t1, t0);
    i = 2;
    while (i <! 50)
    {
        x25519_square(t0, t1);
        x25519_square(t1, t0);
        i += 2;
    }
    x25519_mult(t0, t1, z2_50_0);

    x25519_square(t1, t0);
    x25519_square(t0, t1);
    x25519_square(t1, t0);
    x25519_square(t0, t1);
    x25519_square(t1, t0);
    x25519_mult(out, t1, z11);
}

function x25519_scalarmult(q, n, p)
(work[96], e{32}, i)
{
    memcpy(e, n, 32);
    e{0} &= 248;
    e{31} &= 127;
    e{31} |= 64;
    i = 0;
    while (i <! 32)
    {
        work[i] = p{i};
        i += 1;
    }
    x25519_mainloop(work, e);
    x25519_recip(&work[32], &work[32]);
    x25519_mult(&work[64], work, &work[32]);
    x25519_freeze(&work[64]);
    i = 0;
    while (i <! 32)
    {
        q{i} = work[i + 64];
        i += 1;
    }
}

function x25519_scalarmult_base(out, scalar)
(base{32})
{
    memset(base, 0, 32);
    base{0} = 9;
    x25519_scalarmult(out, scalar, base);
}