function rsa_mul(out, a, b)
(carry)
{
    memsetd(out, 0, 128);
    XOR ECX, ECX
.o:
    MOV DWORD [carry], 0
    XOR ESI, ESI
.i:
    MOV EBX, [a]
    MOV EAX, [EBX + ECX * 4]
    MOV EBX, [b]
    MUL DWORD [EBX + ESI * 4]
    LEA EDI, [ECX + ESI]
    MOV EBX, [out]
    ADD EAX, [EBX + EDI * 4]
    ADC EDX, 0
    ADD EAX, [carry]
    ADC EDX, 0
    MOV [EBX + EDI * 4], EAX
    MOV [carry], EDX
    INC ESI
    CMP ESI, 64
    JNZ .i
    MOV EAX, [carry]
    MOV [EBX + ECX * 4 + 64 *! 4], EAX
    INC ECX
    CMP ECX, 64
    JNZ .o
}

function rsa_sub(out, a, b)
{
    MOV ESI, [a]
    MOV EDI, [out]
    MOV EDX, [b]
    MOV ECX, 65
    CLC
.l:
    LODSD
    SBB EAX, [EDX]
    STOSD
    LEA EDX, [EDX + 4]
    LOOP .l
}

function rsa_lshift1(x)
(i)
{
    i = 64;
    while (i >=$ 0)
    {
        if (i == 0) x[0] <<= 1;
        else x[i] = (x[i] << 1) | (x[i - 1] >> 31);
        i -= 1;
    }
}

function rsa_cmp(x, y)
(i)
{
    i = 64;
    while (i >=$ 0)
    {
        if (x[i] <! y[i]) return -1;
        if (x[i] >! y[i]) return 1;
        i -= 1;
    }
    return 0;
}

function rsa_mod(out, a, b)
(i)
{
    memsetd(out, 0, 65);
    i = 4095;
    while (i >=$ 0)
    {
        rsa_lshift1(out);
        out{0} |= (a{i >> 3} >> (i & 7)) & 1;
        if (rsa_cmp(out, b) >=$ 0) rsa_sub(out, out, b);
        i -= 1;
    }
}

function rsa_modmul(out, x, y, mod)
(tmp[128])
{
    rsa_mul(tmp, x, y);
    rsa_mod(out, tmp, mod);
}

function rsa_modexp(out, base, e, m)
(b[65], r[65], exp[64], mod[65], i)
{
    memsetd(r, 0, 65);
    b[64] = 0;
    mod[64] = 0;
    r{0} = 1;
    i = 0;
    while (i <! 256)
    {
        b{i} = base{255 - i};
        exp{i} = e{255 - i};
        mod{i} = m{255 - i};
        i += 1;
    }
    i = 0;
    while (i <! 2048)
    {
        if ((exp{i >> 3} >> (i & 7)) & 1) rsa_modmul(r, r, b, mod);
        rsa_modmul(b, b, b, mod);
        i += 1;
    }
    i = 0;
    while (i <! 256)
    {
        out{i} = r{255 - i};
        i += 1;
    }
}