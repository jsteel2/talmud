global rx_buffer, mac{6}, rtl_io, tx_cur;

function nic_init(bus, dev, fun)
(irq)
{
    pci_write32(bus, dev, fun, PCI_REG_COMMAND, pci_read32(bus, dev, fun, PCI_REG_COMMAND) | 4);
    rtl_io = pci_read32(bus, dev, fun, PCI_REG_BAR0) & 0xFFFFFFFC;
    irq = pci_read32(bus, dev, fun, PCI_REG_INTERRUPT_LINE) & 0xFF;
    MOV DX, [rtl_io]
    ADD DX, 0x52
    XOR AL, AL
    OUT DX, AL
    SUB DX, 0x1B
    MOV AL, 0x10
    OUT DX, AL
.l:
    IN AL, DX
    TEST AL, 0x10
    JNZ .l

    rx_buffer = malloc(64 *! 1024 + 16 + 1500);
    MOV DX, [rtl_io]
    ADD DX, 0x30
    MOV EAX, [rx_buffer]
    OUT DX, EAX
    ADD DX, 0x0C
    MOV AX, 5
    OUT DX, AX
    ADD DX, 0x08
    MOV EAX, 0x8E | (0b11 << 11)
    OUT DX, EAX
    SUB DX, 0x0D
    MOV AL, 0x0C
    OUT DX, AL

    XOR ECX, ECX
    MOV DX, [rtl_io]
.l2:
    IN AL, DX
    MOV [ECX + mac], AL
    INC ECX
    INC DX
    CMP ECX, 6
    JNZ .l2
    format(print, "MAC: %x:%x:%x:%x:%x:%x\n", mac{0}, mac{1}, mac{2}, mac{3}, mac{4}, mac{5});
    idt_set_entry(0x20 + irq, rtl_irq_handler, 0x8E);
    LIDT [idtr]
    pic_clear_mask(irq);
    MOV DX, [rtl_io]
    ADD DX, 0x20
    XOR EAX, EAX
    OUT DX, EAX
    ADD DX, 4
    OUT DX, EAX
    ADD DX, 4
    OUT DX, EAX
    ADD DX, 4
    OUT DX, EAX
}

function nic_tx_packet(data, size)
{
    MOV DX, [rtl_io]
    ADD DX, [tx_cur]
    ADD DX, 0x10
    IN EAX, DX
    TEST EAX, (1 << 13)
    JZ .full
    ADD DX, 0x10
    IN EAX, DX
    PUSH EAX
    CALL free
    POP EAX
    MOV EAX, [data]
    OUT DX, EAX
    SUB DX, 0x10
    MOV EAX, [size]
    OUT DX, EAX
    tx_cur = (tx_cur + 4) %! 0x10;
    return TRUE;
.full:
    return FALSE;
}

function nic_rx_packet(data, size)
(cbr, capr, status, length)
{
    XOR EAX, EAX
    MOV DX, [rtl_io]
    ADD DX, 0x38
    IN AX, DX
    ADD AX, 16
    MOV [capr], EAX
    ADD DX, 2
    IN AX, DX
    MOV [cbr], EAX
    if (cbr != capr)
    {
        status = rx_buffer.<capr>;
        length = rx_buffer.<capr + 2>;
        capr += 4;
        if (status & 1) memcpy(data, &rx_buffer{capr}, *size = length - 4);
        MOV AX, [capr]
        SUB AX, 16
        ADD AX, [length]
        MOV DX, [rtl_io]
        ADD DX, 0x38
        OUT DX, AX
        if (status & 1) return TRUE;
        return nic_rx_packet(data, size);
    }
    return FALSE;
}

rtl_irq_handler:
    PUSH EAX
    PUSH EDX
    MOV DX, [rtl_io]
    ADD DX, 0x3E
    IN AX, DX
    TEST AX, 1
    MOV AX, 0x05
    OUT DX, AX
    JZ .e
    MOV EAX, [net_task]
    MOV DWORD [EAX + TASK_WAIT], FALSE
.e:
    MOV AX, 0x0E
    OUT DX, AX
    MOV AL, 0x20
    OUT 0xA0, AL
    OUT 0x20, AL
    POP EDX
    POP EAX
    IRET