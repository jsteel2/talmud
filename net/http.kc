function httpd_task(x)
(buf{4096}, str{STRING}, f{FILE}, d{DIR_ENTRY}, s, send, sends, close, recvuntil)
{
    s = x[0];
    send = x[1];
    sends = x[2];
    close = x[3];
    recvuntil = x[4];
    free(x);
    if (!(str.[STRINGLEN] = recvuntil(s, buf, 4096, '\n'))) JMP .e
    if (str.[STRINGLEN] <! 14 or buf.[0] != ' TEG')
    {
        sends(s, "HTTP/1.0 400 Bad Request\r\n\r\n");
        JMP .e
    }
    str.[STRINGLEN] -= 4;
    str.[STRINGPTR] = buf + 4;
    str.[STRINGLEN] = strchr(str, ' ');
    if (!open(str, f, 0))
    {
        sends(s, "HTTP/1.0 404 Not Found\r\n\r\n");
        JMP .e
    }
    sends(s, "HTTP/1.0 200 OK\r\n\r\n");
    if (f{FILE_FLAGS} & FILE_FDIRECTORY)
    {
        if (!sends(s, "<body><html><ul>")) JMP .e
        while (dir_next(f, d))
        {
            f83tos(d, str);
            if (!sends(s, "<li><a href=\"")) JMP .e
            if (!sends(s, str)) JMP .e
            if (d{DIR_ENTRY_ATTR} & FILE_FDIRECTORY and !sends(s, "/")) JMP .e
            if (!sends(s, "\">")) JMP .e
            if (!sends(s, str)) JMP .e
            if (!sends(s, "</a></li>")) JMP .e
        }
        if (!sends(s, "</ul></body></html>")) JMP .e
    }
    else
    {
        while (send(s, buf, read(f, 4096, buf)));
    }
.e:
    close(s);
}

function _httpxd(listen, cert, priv, accept, port, close, send, sends, recv, recvuntil, e)
(s, n, x, p)
{
    s = listen(port, 3, cert, priv);
    if (!s) return print("Could not listen\n");
    format(print, "Listening on port %d\n", port);
    while (TRUE)
    {
.l:     n = accept(s);
        if (!n) JMP .l
        p = e ? n.[TLS_TCP_SOCK] : n;
        x = malloc(5 *! 4);
        x[0] = n;
        x[1] = send;
        x[2] = sends;
        x[3] = close;
        x[4] = recvuntil;
        x.[MEM_HEADER_TASK - MEM_HEADER] = p.[TCP_SOCK_TASK] = new_task("HTTP", httpd_task, x);
    }
    close(s);
}

function httpd() _httpxd(tcp_listen, 0, 0, tcp_accept, 80, tcp_close, tcp_send, tcp_sends, tcp_recv, tcp_recvuntil, FALSE);
function httpsd(cert, priv) _httpxd(tls_listen, cert, priv, tls_accept, 443, tls_close, tls_send, tls_sends, tls_recv, tls_recvuntil, TRUE);

function _httpx_fetch(connect, close, sends, recvuntil, recv, resolve, host, port, path, destpath)
(s, buf{4096}, str{STRING}, f{FILE}, l, x, ip)
{
    if (resolve)
    {
        if (!(ip = ipv4_parse(host))) ip = dns_resolve(host);
    }
    else
    {
        ip = host;
    }
    if (!strcmp(destpath, "-") and !open(destpath, f, FILE_FCREATE)) return print("Could not open file\n");
    s = connect(ip, port);
    if (!s) return print("Could not connect\n");
    if (!sends(s, "GET ")) JMP .e
    if (!sends(s, path)) JMP .e
    if (!sends(s, " HTTP/1.0\r\nUser-Agent: curl/Talmud\r\nHost: ")) JMP .e
    if (!sends(s, host)) JMP .e
    if (!sends(s, "\r\n\r\n")) JMP .e
    str.[STRINGPTR] = buf;
    if (!(str.[STRINGLEN] = recvuntil(s, buf, 4096, '\n'))) JMP .e
    if (!strcmp(str, "HTTP/1.0 200 OK\r\n") and !strcmp(str, "HTTP/1.1 200 OK\r\n"))
    {
        print(str);
        JMP .e
    }
    while ((l = recvuntil(s, buf, 4096, '\n')) >! 2);
    if (!l) JMP .e
    l = 0;
    str.[STRINGPTR] = buf;
    while ((str.[STRINGLEN] = recv(s, buf, 4096)))
    {
        l += str.[STRINGLEN];
        if (strcmp(destpath, "-")) print(str);
        else write(f, str.[STRINGLEN], buf);
    }
    if (!strcmp(destpath, "-")) resize(f, l);
.e:
    close(s);
}

function http_fetch(host, port, path, destpath) return _httpx_fetch(tcp_connect, tcp_close, tcp_sends, tcp_recvuntil, tcp_recv, TRUE, host, port, path, destpath);
function https_fetch(host, port, path, destpath) return _httpx_fetch(tls_connect, tls_close, tls_sends, tls_recvuntil, tls_recv, FALSE, host, port, path, destpath);