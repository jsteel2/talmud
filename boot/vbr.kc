# adapted BootProg boot16.asm

ORG 0

RB 3
bsOemName: RB 8

bpbBytesPerSector:    RB 2
bpbSectorsPerCluster: RB 1
bpbReservedSectors:   RB 2
bpbNumberOfFATs:      RB 1
bpbRootEntries:       RB 2
bpbTotalSectors:      RB 2
bpbMedia:             RB 1
bpbSectorsPerFAT:     RB 2
bpbSectorsPerTrack:   RB 2
bpbHeadsPerCylinder:  RB 2
bpbHiddenSectors:     RB 4
bpbTotalSectorsBig:   RB 4

bsDriveNumber:      RB 1
bsUnused:           RB 1
bsExtBootSignature: RB 1
bsSerialNumber:     RB 4
bsVolumeLabel:      RB 11
bsFileSystem:       RB 8   

start:
    CLD
    
    INT 0x12
    MOV CL, 6
    SHL AX, CL

    SUB AX, 4096 /! 16
    MOV ES, AX
    CLI
    MOV SS, AX
    MOV SP, 4096
    STI

    MOV [partnumber], DI
    MOV CX, 256
    MOV SI, 0x7C00
    XOR DI, DI
    MOV DS, DI
    REPZ MOVSW

    PUSH ES
    MOV CL, main
    PUSH CX
    RETF

main:
    PUSH CS
    POP DS

    MOV [bsDriveNumber], DL

    MOV AH, 8
    INT 0x13
    MOV BX, 0
    JB .no_new_geom
    AND CX, 63
    MOV [bpbSectorsPerTrack], CX
    MOV CL, DH
    INC CX
    MOV [bpbHeadsPerCylinder], CX
.no_new_geom:

    MOV AX, 32
    MUL WORD [bpbRootEntries]
    DIV WORD [bpbBytesPerSector]
    XCHG CX, AX

    MOV AL, [bpbNumberOfFATs]
    CBW
    MUL WORD [bpbSectorsPerFAT]

    MOV DI, 0x50
    MOV ES, DI

    PUSH ES
    CALL read_sector
    POP ES

    PUSH DX
    PUSH AX

    MOV DI, BX
    MOV DX, [bpbRootEntries]

find_name:
    MOV SI, kernel_name
    MOV CX, 11
    CMP BYTE [ES:DI], CH
    JZ .find_name_error
    PUSH DI
    REPZ CMPSB
    POP DI
    JZ .find_name_found
    ADD DI, 32
    DEC DX
    JNZ find_name
.find_name_error:
    CALL error
    DB 'File not found', 0
.find_name_found:
    MOV DI, [ES:DI + 0x1A]
    PUSH ES

read_cluster:
    MOV BP, SP
    PUSH DI
    MOV AX, [bpbBytesPerSector]
    SHR AX, 1
    XCHG AX, DI
    XOR DX, DX
    DIV DI

    PUSH DX

    XOR DX, DX
    MOV CX, 1
    PUSH ES
    CALL read_sector
    POP ES

    POP DI
    ADD DI, DI
    MOV CX, [ES:BX+DI]

    POP DI
    LEA AX, [DI+-2]
    MOV DI, CX
    XOR CH, CH
    MOV CL, [bpbSectorsPerCluster]
    MUL CX

    ADD AX, [BP+2]
    ADC DX, [BP+4]

    CALL read_sector
    CMP DI, 0xFFF8
    JB read_cluster

    MOV DI, [partnumber]
    MOV DL, [bsDriveNumber]
    MOV DH, 0
    POP AX
    MOV ES, AX
    MOV DS, AX
    CLI
    MOV SS, AX
    MOV SP, 0xFFFF
    STI
    PUSH AX
    PUSH AX
    XOR AX, AX
    PUSH AX
    MOV BP, SP
    SUB SP, 4
    CALL FAR [BP]
    JMP 0xFFFF:0

read_sector:
    PUSH DI
.read_sector_next:
    MOV DI, 5
.read_sector_retry:
    PUSH AX
    PUSH DX
    PUSH CX

    ADD AX, [bpbReservedSectors]
    ADC DX, BX

    ADD AX, [bpbHiddenSectors]
    ADC DX, [bpbHiddenSectors + 2]

    JB .read_error
    TEST DH, DH
    JNZ .read_error

    XCHG AX, CX
    XCHG AX, DX

    CWD
    DIV WORD [bpbSectorsPerTrack]
    XCHG AX, CX
    DIV WORD [bpbSectorsPerTrack]
    XCHG CX, DX
    INC CX
    DIV WORD [bpbHeadsPerCylinder]
    MOV CH, AL
    CMP AH, 4
    JNB .read_error
    ROR AH, 1
    ROR AH, 1
    OR CL, AH
    MOV DH, DL
    MOV AX, 0x201
    MOV DL, [bsDriveNumber]
    INT 0x13

    JNB .read_sector_done
    MOV AH, 0
    INT 0x13
    POP CX
    POP DX
    POP AX

    DEC DI
    JNZ .read_sector_retry

.read_error:
    CALL error
    DB 'Read Error', 0

.read_sector_done:
    MOV DX, [bpbBytesPerSector]
    MOV CL, 4
    SHR DX, CL
    MOV AX, ES
    ADD AX, DX
    MOV ES, AX

    POP CX
    POP DX
    POP AX

    INC AX
    JNZ .read_sector_incd
    INC DX
.read_sector_incd:
    LOOP .read_sector_next

    POP DI
    RET

error:
    POP SI
    MOV AH, 0x0E
    MOV BX, 7
.error_next:
    LODSB
    TEST AL, AL
    JZ .done
    INT 0x10
    JMP .error_next
.done:
    CLI
    HLT
    JMP $

kernel_name: DB 'COMMAND EXE'
partnumber: RB 2
