global str{STRING}, installpath{STRING}, installdir{FILE};

function mbr()
(c{COMPILER}, bin)
{
    if (!compiler_init(c)) return print("Could not initialize compiler\n");
    bin = compile(c, "install", "include \"/boot/mbr.kc\"");
    compiler_free(c);
    if (!bin) return;
    if (!lba_read(installdir{FILE_DRIVE}, 1, 0, installdir)) return print("Could not read MBR sector\n");
    memcpy(installdir, bin, 440);
    if (!lba_write(installdir{FILE_DRIVE}, 1, 0, installdir)) return print("Could not write MBR sector\n");
}

function vbr()
(c{COMPILER}, bin, lba)
{
    if (!compiler_init(c)) return print("Could not initialize compiler\n");
    bin = compile(c, "install", "include \"/boot/vbr.kc\"");
    compiler_free(c);
    if (!bin) return;
    if (!lba_read(installdir{FILE_DRIVE}, 1, 0, installdir)) return print("Could not read MBR sector\n");
    lba = installdir.[PARTITION_TABLE + installdir{FILE_PARTITION} *! 16 + PARTITION_LBA];
    if (!lba_read(installdir{FILE_DRIVE}, 1, lba, installdir)) return print("Could not read VBR sector\n");
    memcpy(installdir + 90, bin + 90, 420);
    if (!lba_write(installdir{FILE_DRIVE}, 1, lba, installdir)) return print("Could not write VBR sector\n");
}

function eden()
(f{FILE}, fb{FILE}, c{COMPILER}, bin)
{
    memcpy(fb, &task{TASK_CWD}, FILE);
    if (!cd("/")) return print("Could not cd to /\n");;
    if (!compiler_init(c)) return print("Could not initialize compiler\n");
    bin = compile(c, "install", "include \"boot/eden.kc\"");
    compiler_free(c);
    if (!bin) return;
    if (!openat(installdir, "/eden.exe", f, TRUE)) return format(print, "Could not open %s/EDEN.EXE\n", installpath);
    if (!write(f, c.[CIP] - c.[CORG], bin)) return print("Could not write to file\n");
    free(bin);
    if (!resize(f, c.[CIP] - c.[CORG])) return print("Could not resize file\n");
    memcpy(&task{TASK_CWD}, fb, FILE);
}

function formatpart()
{
    print("TODO\n");
}

function sys()
{
    print("TODO\n");
}

print("Enter installation path (ex. :80;1): ");
if (!inputline(str)) RET;
strdup(str, installpath);
format(print, "Is %s correct? ", str);
if (!inputline(str) or !str.[STRINGLEN] or upper(str.[STRINGPTR]{0}) != 'Y') { free(installpath.[STRINGPTR]); RET }
if (!open(installpath, installdir, FALSE)) { print("Could not open path\n"); free(installpath.[STRINGPTR]); RET }
print("Format partition to FAT32? ");
if (inputline(str) and str.[STRINGLEN] and upper(str.[STRINGPTR]{0}) == 'Y') formatpart();
eden();
print("Install VBR? ");
if (inputline(str) and str.[STRINGLEN] and upper(str.[STRINGPTR]{0}) == 'Y') vbr();
print("Install MBR? ");
if (inputline(str) and str.[STRINGLEN] and upper(str.[STRINGPTR]{0}) == 'Y') mbr();
print("Install system files? ");
if (inputline(str) and str.[STRINGLEN] and upper(str.[STRINGPTR]{0}) == 'Y') sys();
free(installpath.[STRINGPTR]);