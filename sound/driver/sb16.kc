function soundhw_init()
{
    MOV DX, 0x225
    MOV AL, 0x80
    OUT DX, AL
    MOV AL, 0x02
    OUT DX, AL
    idt_set_entry(0x25, sb16_irq_handler, 0x8E);
    pic_clear_mask(0x05);
}

global placeholder, placeholder2;
function soundhw_test()
(f{FILE})
{
    open("/adam/music.wav", f, 0);
    seek(f, 44);
    placeholder = task;
    read(f, 0xFFFF, DMA_BUF);
    soundhw_start();
    while (!placeholder2) wait();
    placeholder2 = FALSE;
    while (read(f, 0xFFFF, DMA_BUF))
    {
        while (!placeholder2) wait();
        placeholder2 = FALSE;
    }
    soundhw_stop();
}

global soundhw_running;
function soundhw_start()
{
    if (soundhw_running) return;
    soundhw_running = TRUE;
    MOV AL, 5
    OUT 0x0A, AL
    MOV AL, 0
    OUT 0x0C, AL
    MOV AL, 0x59
    OUT 0x0B, AL
    MOV AL, DMA_BUF >> 16
    OUT 0x83, AL
    MOV AL, DMA_BUF & 0xFF
    OUT 0x02, AL
    MOV AL, (DMA_BUF >> 8) & 0xFF
    OUT 0x02, AL
    MOV AL, 0xFF
    OUT 0x03, AL
    OUT 0x03, AL
    MOV AL, 1
    OUT 0x0A, AL

    MOV DX, 0x22C
    MOV AL, 0x41
    OUT DX, AL
    MOV AL, 44100 >> 8
    OUT DX, AL
    MOV AL, 44100 & 0xFF
    OUT DX, AL

    MOV AL, 0xD1
    OUT DX, AL
    MOV AL, 0xC6
    OUT DX, AL
    MOV AL, 0
    OUT DX, AL

    MOV AL, 0xFE
    OUT DX, AL
    MOV AL, 0xFF
    OUT DX, AL
}

function soundhw_stop()
{
    if (!soundhw_running) return;
    MOV DX, 0x22C
    MOV AL, 0xD0
    OUT DX, AL
    soundhw_running = FALSE;
}

sb16_irq_handler:
    PUSH EAX
    PUSH EDX
    MOV EAX, [placeholder]
    MOV DWORD [EAX + TASK_WAIT], FALSE
    MOV DWORD [placeholder2], TRUE
    MOV DX, 0x22E
    IN AL, DX
    MOV AL, 0x20
    OUT 0x20, AL
    POP EDX
    POP EAX
    IRET