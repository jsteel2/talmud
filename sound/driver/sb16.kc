function soundhw_init()
{
    MOV DX, 0x225
    MOV AL, 0x80
    OUT DX, AL
    MOV AL, 0x02
    OUT DX, AL
    idt_set_entry(0x25, sb16_irq_handler, 0x8E);
    pic_clear_mask(0x05);
}

global soundhw_running;
function soundhw_start()
{
    if (soundhw_running) return;
    soundhw_running = TRUE;
    MOV AL, 5
    OUT 0xD4, AL
    MOV AL, 0
    OUT 0xD8, AL
    MOV AL, 0x59
    OUT 0xD6, AL
    MOV AL, (DMA_BUF >> 16) & 0xFE
    OUT 0x8B, AL
    MOV AL, (DMA_BUF >> 1) & 0xFF
    OUT 0xC4, AL
    MOV AL, (DMA_BUF >> 9) & 0xFF
    OUT 0xC4, AL
    MOV AL, 0xFF
    OUT 0xC6, AL
    MOV AL, 0x7F
    OUT 0xC6, AL
    MOV AL, 1
    OUT 0xD4, AL

    MOV DX, 0x22C
    MOV AL, 0x41
    OUT DX, AL
    MOV AL, 44100 >> 8
    OUT DX, AL
    MOV AL, 44100 & 0xFF
    OUT DX, AL

    MOV AL, 0xD1
    OUT DX, AL
    MOV AL, 0xB6
    OUT DX, AL
    MOV AL, 0x30
    OUT DX, AL

    MOV AL, 0xFF
    OUT DX, AL
    MOV AL, 0x3F
    OUT DX, AL
}

function soundhw_stop()
{
    if (!soundhw_running) return;
    MOV DX, 0x22C
    MOV AL, 0xD5
    OUT DX, AL
    soundhw_running = FALSE;
}

sb16_irq_handler:
    PUSH EAX
    PUSH EDX
    MOV AX, 0x10
    MOV DS, AX
    MOV ES, AX
    MOV FS, AX
    MOV GS, AX
    MOV EAX, [sound_task]
    MOV BYTE [EAX + TASK_WAIT], FALSE
    MOV DX, 0x22F
    IN AL, DX
    MOV AL, 0x20
    OUT 0x20, AL
    POP EDX
    POP EAX
    IRET