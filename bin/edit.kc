import "/lib/exe.kc"
import "/lib/print.kc"
import "/lib/fs.kc"

function main(argc, argv, cwdpat)
(buf{32 *! 1024}, in{1024}, file{FILE}, cwd{FILE}, s[STRING], i, i2, i3, s2[STRING], len, char, scan, off, row, col, cur_col, cursor_off)
{
    if (argc <! 2)
    {
        format(print, "Usage: %s <file>\r\n", argv);
        return;
    }

    if (!openat(0, cwdpat, cwd, 0))
    {
        print("what in gods name?\r\n");
        return;
    }

    if (!openat(cwd, argv + STRING *! 2, file, 1))
    {
        format(print, "Could not open file '%s'.\r\n", argv + STRING *! 2);
        return;
    }
    len = read(file, 32 *! 1024, buf, -1);
    s[STRINGPTR] = buf;
    i = 0;
    row = 0;
    col = 0;
    while (i <! minu(len, 80 *! 25))
    {
        if (buf{i} = '\r')
        {
            row = row + 1;
            col = 0;
        }
        col = col + 1;
        if (col = 80)
        {
            col = 0;
            row = row + 1;
        }
        if (row = 25) JMP .e
        i = i + 1;
    }
.e:
    s[STRINGLEN] = i;
    scroll(1, 0, 0, 0, 25, 80, 0x9F);
    cursor_set(0, 0);
    print(s);
    cursor_set(0, 0);
    row = 0;
    col = 0;
    cur_col = 0;
    off = 0;
    cursor_off = 0;

    while (1)
    {
        char = 0;
        scan = 0;
        MOV AH, 0x00
        INT 0x16
        MOV [char], AL
        MOV [scan], AH

        if (scan = 0x01)
        {
            scroll(1, 0, 0, 0, 25, 80, 0x07);
            cursor_set(0, 0);
            print("Save? [y/N]: ");
            MOV AH, 0x00
            INT 0x16
            MOV [char], AL
            format(print, "%c", char);
            print("\r\n");
            if (upper(char) = 'Y')
            {
                seek(file, 0);
                write(file, buf, len);
            }
            return;
        }

        if (scan = 0x4D and off + cursor_off <! len and buf{off + cursor_off} != '\r' and col <! 79)
        {
            col = col + 1;
            cursor_off = cursor_off + 1;
            cursor_set(row, col);
            cur_col = col;
        }
        else if (scan = 0x4B and off + cursor_off >! 0 and col >! 0)
        {
            col = col - 1;
            cursor_off = cursor_off - 1;
            cursor_set(row, col);
            cur_col = col;
        }
        else if (scan = 0x50 and off + cursor_off <! len)
        {
            i = 0;
            while (buf{off + cursor_off} != '\n')
            {
                cursor_off = cursor_off + 1;
                i = i + 1;
                if (off + cursor_off >=! len)
                {
                    cursor_off = i2;
                    JMP .g
                }
            }
            row = row + 1;
            cursor_off = cursor_off + 1;
            col = 0;
            if (row = 25)
            {
                row = 24;
                s[STRINGPTR] = buf + off + cursor_off;
                s[STRINGLEN] = len - off - cursor_off;
                i = 0;
                while (buf{off + i} != '\n') i = i + 1;
                off = off + i;
                cursor_off = cursor_off - i;
                s[STRINGLEN] = strchr(s, '\r');
                scroll(1, 1, 0, 0, 25, 80, 0x9F);
                cursor_set(row, 0);
                print(s);
            }
            while (col <! cur_col and off + cursor_off <! len and buf{off + cursor_off} != '\r')
            {
                cursor_off = cursor_off + 1;
                col = col + 1;
                if (off + cursor_off >=! len) JMP .g
            }
.g:
            cursor_set(row, col);
        }
        else if (scan = 0x48 and off + cursor_off >! 0)
        {
            i2 = 0;
            while (buf{off + cursor_off} != '\n')
            {
                cursor_off = cursor_off - 1;
                i2 = i2 + 1;
                if (off + cursor_off = 0)
                {
                    cursor_off = cursor_off + i2;
                    JMP .gu
                }
            }
            cursor_off = maxs(0, cursor_off - 2);
            i = 0;
            while (buf{off + cursor_off} != '\n')
            {
                cursor_off = cursor_off - 1;
                i = i + 1;
                if (off + cursor_off <$ 0) JMP .gus
            }
.gus:
            cursor_off = cursor_off + 1;
            row = row - 1;
            if (row = -1)
            {
                row = 0;
                scroll(0, 1, 0, 0, 25, 80, 0x9F);
                s[STRINGPTR] = buf + off + cursor_off;
                s[STRINGLEN] = len - off - cursor_off;
                i2 = 0;
                while (buf{off + cursor_off + i2} != '\n') i2 = i2 + 1;
                off = off - i2 - 1;
                cursor_off = cursor_off + i2 + 1;
                s[STRINGLEN] = strchr(s, '\r');
                cursor_set(row, 0);
                print(s);
            }
            if (i >! cur_col) i = cur_col;
            cursor_off = cursor_off + i;
            col = i;
            cursor_set(row, col);
.gu:
        }
        else if (char = '\b' and off + cursor_off >! 0)
        {
            if (buf{off + cursor_off - 1} = '\n')
            {
                cursor_off = cursor_off - 2;
                s[STRINGPTR] = buf + off + cursor_off;
                s[STRINGLEN] = len - off - cursor_off;
                i = col;
                col = 0;
                while (off + cursor_off - col >! 0 and buf{off + cursor_off - col} != '\n') col = col + 1;
                col = col - 1;
                if (col = 79)
                {
                    cursor_off = cursor_off + 2;
                    col = i;
                    JMP .no
                }
                memcpy(s[STRINGPTR], s[STRINGPTR] + 2, s[STRINGLEN], -1);
                s[STRINGLEN] = strchr(s, '\r');
                if (col + s[STRINGLEN] >! 79)
                {
                    s2[STRINGPTR] = buf + off + cursor_off - col;
                    s2[STRINGLEN] = 79;
                    memmove(buf + off + cursor_off - col + 81, buf + off + cursor_off - col + 79, len - off - cursor_off, -1);
                    buf{off + cursor_off - col + 79} = '\r';
                    buf{off + cursor_off - col + 80} = '\n';
                    row = row - 1;
                    cursor_set(row, 0);
                    print(s2);
                    cursor_set(row + 1, 0);
                    s2[STRINGPTR] = buf + off + cursor_off - col + 81;
                    s2[STRINGLEN] = s[STRINGLEN] - (79 - col);
                    i = s[STRINGLEN] - s2[STRINGLEN];
                    print(s2);
                    while (i)
                    {
                        print(" ");
                        i = i - 1;
                    }
                    cursor_set(row, col);
                }
                else
                {
                    scroll(1, 1, row, 0, 25, 80, 0x9F);
                    row = row - 1;
                    len = len - 2;
                    cursor_set(row, col);
                    print(s);
                    cursor_set(row, col);
                }
                cur_col = col;
            }
            else
            {
                s[STRINGPTR] = buf + off + cursor_off - 1;
                s[STRINGLEN] = len - off - cursor_off;
                memcpy(s[STRINGPTR], s[STRINGPTR] + 1, s[STRINGLEN], -1);
                s[STRINGLEN] = strchr(s, '\r');
                col = col - 1;
                cursor_set(row, col);
                format(print, "%s ", s);
                cursor_off = cursor_off - 1;
                len = len - 1;
                cursor_set(row, col);
                cur_col = col;
            }
.no:
        }
        else if (char = '\r')
        {
            s[STRINGPTR] = buf + off + cursor_off + 2;
            s[STRINGLEN] = len - off - cursor_off;
            memmove(s[STRINGPTR], s[STRINGPTR] - 2, s[STRINGLEN], -1);
            s[STRINGPTR][-1] = '\n\r';
            s[STRINGLEN] = strchr(s, '\r');
            i = s[STRINGLEN];
            cursor_off = cursor_off + 2;
            len = len + 2;
            while (i)
            {
                print(" ");
                i = i - 1;
            }
            row = row + 1;
            if (row = 25)
            {
                i = 0;
                while (buf{off + i} != '\n') i = i + 1;
                off = off + i + 1;
                cursor_off = cursor_off - i - 1;
                row = 24;
                scroll(1, 1, 0, 0, 25, 80, 0x9F);
            }
            else
            {
                scroll(0, 1, row, 0, 25, 80, 0x9F);
            }
            col = 0;
            cursor_set(row, col);
            cur_col = col;
            print(s);
            cursor_set(row, col);
        }
        else if (char = '\t' and col + 4 <! 78)
        {
            i = 4;
            while (i)
            {
                insert(' ', buf, &off, &cursor_off, &row, &col, &cur_col, &len);
                i = i - 1;
            }
        }
        else if (isprint(char) and col <! 78)
        {
            insert(char, buf, &off, &cursor_off, &row, &col, &cur_col, &len);
        }
    }
}

function scroll(up, lines, ur, lc, lr, rc, color)
{
    up = up ? 6 : 7;
    MOV AH, [up]
    MOV AL, [lines]
    MOV CH, [ur]
    MOV CL, [lc]
    MOV DH, [lr]
    MOV DL, [rc]
    MOV BH, [color]
    INT 0x10
}

function cursor_set(row, col)
{
    MOV AH, 0x02
    MOV DL, [col]
    MOV DH, [row]
    MOV BH, 0
    INT 0x10
}

function insert(char, buf, off, cursor_off, row, col, cur_col, len)
(s[STRING], i)
{
    s[STRINGPTR] = buf + *off + *cursor_off;
    s[STRINGLEN] = *len - *off - *cursor_off;
    i = strchr(s, '\r');
    if (*col + i = 78) return;
    s[STRINGPTR] = s[STRINGPTR] + 1;
    memmove(s[STRINGPTR], s[STRINGPTR] - 1, s[STRINGLEN], -1);
    s[STRINGPTR]{-1} = char;
    s[STRINGLEN] = i;
    *col = *col + 1;
    *cursor_off = *cursor_off + 1;
    format(print, "%c%s", char, s);
    cursor_set(*row, *col);
    *cur_col = *col;
    *len = *len + 1;
}

function isprint(c) return c >! 31 and c <! 127;
