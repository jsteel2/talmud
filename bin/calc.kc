import "/lib/exe.kc"
import "/lib/print.kc"

struct TOKENS = TEND, TNUM, TADD, TSUB, TMUL, TDIV, TMOD, TLPAR, TRPAR;
struct TOKEN = TOKTYPE, TOKVAL;

function main(argc, argv, cwdpat)
(buf{1024}, s, i)
{
    s[STRINGPTR] = buf;
    if (argc = 1)
    {
        while (1)
        {
            print("> ");
            input(s, 1024);
            if (stricmp(s, "q")) JMP .end
            calc(s);
        }
    }
    else
    {
        i = 1;
        s[STRINGLEN] = 0;
        while (i <! argc)
        {
            memcpy(buf + s[STRINGLEN], argv[i *! STRING + STRINGPTR], argv[i *! STRING + STRINGLEN], -1);
            s[STRINGLEN] = s[STRINGLEN] + argv[i *! STRING + STRINGLEN] + 1;
            s[STRINGPTR]{s[STRINGLEN] - 1} = ' ';
            i = i + 1;
        }
        calc(s);
    }

.end:
}

function calc(expr)
(cur[TOKEN], n)
{
    if (token(expr, cur)) return;
    n = term(expr, cur);
    if (n <$ 0) format(print, "-%d (%d)\r\n", -n, n);
    else format(print, "%d\r\n", n);
}

function term(expr, cur)
(l, t)
{
    l = factor(expr, cur);

    t = cur[TOKTYPE];
    while (1)
    {
        if (t = TADD and !token(expr, cur)) l = l + factor(expr, cur);
        else if (t = TSUB and !token(expr, cur)) l = l - factor(expr, cur);
        else JMP .r
        t = cur[TOKTYPE];
    }

.r: return l;
}

function factor(expr, cur)
(l, t)
{
    l = unary(expr, cur);

    t = cur[TOKTYPE];
    while (1)
    {
        if (t = TMUL and !token(expr, cur)) l = l *$ unary(expr, cur);
        else if (t = TDIV and !token(expr, cur)) l = l /$ unary(expr, cur);
        else if (t = TMOD and !token(expr, cur)) l = l %$ unary(expr, cur);
        else JMP .r
        t = cur[TOKTYPE];
    }

.r: return l;
}

function unary(expr, cur)
{
    if (cur[TOKTYPE] = TSUB)
    {
        if (token(expr, cur)) die("Unexpected end of input.");
        return -unary(expr, cur);
    }
    return primary(expr, cur);
}

function primary(expr, cur)
(num)
{
    if (cur[TOKTYPE] = TLPAR)
    {
        if (token(expr, cur)) die("Unexpected end of input.");
        num = term(expr, cur);
        if (cur[TOKTYPE] != TRPAR) die("Expected right paren");
        token(expr, cur);
        return num;
    }
    if (cur[TOKTYPE] != TNUM) die("Expected number or left paren");
    num = cur[TOKVAL];
    token(expr, cur);
    return num;
}

function token(expr, tok)
(end, c, n, t)
{
    while (expr[STRINGLEN] >$ 0 and expr[STRINGPTR]{0} = ' ')
    {
        expr[STRINGPTR] = expr[STRINGPTR] + 1;
        expr[STRINGLEN] = expr[STRINGLEN] - 1;
    }
    if (expr[STRINGLEN] <=$ 0)
    {
        tok[TOKTYPE] = TEND;
        return 1;
    }
    c = expr[STRINGPTR]{0};
    if (ishex(c))
    {
        tok[TOKVAL] = atoi(expr, &end);
        tok[TOKTYPE] = TNUM;
        expr[STRINGPTR] = expr[STRINGPTR] + end;
        expr[STRINGLEN] = expr[STRINGLEN] - end;
        return 0;
    }

    n = 1;
    if (c = '-') t = TSUB;
    else if (c = '+') t = TADD;
    else if (c = '*') t = TMUL;
    else if (c = '/') t = TDIV;
    else if (c = '%') t = TMOD;
    else if (c = '(') t = TLPAR;
    else if (c = ')') t = TRPAR;
    else die("Unknown symbol %c", c);

    expr[STRINGPTR] = expr[STRINGPTR] + n;
    expr[STRINGLEN] = expr[STRINGLEN] - n;
    tok[TOKTYPE] = t;
    return 0;
}

function die(msg)
{
    format(print, msg, vararg(1));
    print("\r\n");
    exit();
}
