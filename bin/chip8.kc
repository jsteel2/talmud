import "/lib/exe.kc"
import "/lib/fs.kc"
import "/lib/print.kc"

function main(argc, argv, cwdpat)
(file{FILE}, ram{4096}, pc, regs{16}, rpl{8}, fb{64 *! 32 /! 8}, seed, key, delay, instr, instrs, op, x, y, n, nn, nnn, i, c, c2, t)
{
    if (argc = 1) return format(print, "Usage: %s <rom file>.\r\n", argv);
    if (!openat(0, cwdpat, file, 0)) return print("damn.\r\n");
    if (!openat(file, argv + STRING *! 2, file, 0)) return print("ROM file not found.\r\n");

    memset(ram, 0, 4096, -1);
    memset(regs, 0, 16, -1);
    memset(rpl, 0, 8, -1);

    if (read(file, 4096 - 0x200, ram + 0x200, -1) = -1) return print("Could not read file.\r\n");

    memcpy(ram + 0x50, font, font_end - font, -1);

    MOV AX, 0x11
    INT 0x10

    seed = time(0);

    pc = 0x200;
    instrs = 0;
    key = 0xFE;
    delay = 0;
    memset(fb, 0, 64 *! 32 /! 8, -1);
    while (1)
    {
        instr = (ram{pc} << 8) | ram{pc + 1};
        op = (instr & 0xF000) >> 12;
        x = (instr & 0x0F00) >> 8;
        y = (instr & 0x00F0) >> 4;
        nnn = instr & 0x0FFF;
        nn = nnn & 0x00FF;
        n = nn & 0x000F;
        pc = pc + 2;

        if (op = 0)
        {
            if (nnn = 0x0E0)
            {
                MOV AX, 0x11
                INT 0x10
                memset(fb, 0, 64 *! 32 /! 8, -1);
            }
            else if (nnn = 0x0EE)
            {
                POP [pc]
            }
            else
            {
                JMP .end
            }
        }
        else if (op = 1)
        {
            pc = nnn;
        }
        else if (op = 2)
        {
            PUSH [pc]
            pc = nnn;
        }
        else if (op = 3)
        {
            if (regs{x} = nn) pc = pc + 2;
        }
        else if (op = 4)
        {
            if (regs{x} != nn) pc = pc + 2;
        }
        else if (op = 5)
        {
            if (regs{x} = regs{y}) pc = pc + 2;
        }
        else if (op = 6)
        {
            regs{x} = nn;
        }
        else if (op = 7)
        {
            regs{x} = regs{x} + nn;
        }
        else if (op = 8)
        {
            if (n = 0)
            {
                regs{x} = regs{y};
            }
            else if (n = 1)
            {
                regs{x} = regs{x} | regs{y};
            }
            else if (n = 2)
            {
                regs{x} = regs{x} & regs{y};
            }
            else if (n = 3)
            {
                regs{x} = regs{x} ^ regs{y};
            }
            else if (n = 4)
            {
                t = regs{x} + regs{y};
                regs{x} = t;
                if (t >! 0xFF) regs{0xF} = 1;
                else regs{0xF} = 0;
            }
            else if (n = 5)
            {
                if (regs{x} >=! regs{y}) t = 1;
                else t = 0;
                regs{x} = regs{x} - regs{y};
                regs{0xF} = t;
            }
            else if (n = 6)
            {
                t = regs{x} & 1;
                regs{x} = regs{x} >> 1;
                regs{0xF} = t;
            }
            else if (n = 7)
            {
                if (regs{y} >=! regs{x}) t = 1;
                else t = 0;
                regs{x} = regs{y} - regs{x};
                regs{0xF} = t;
            }
            else if (n = 0xE)
            {
                t = regs{x} >> 7;
                regs{x} = regs{x} << 1;
                regs{0xF} = t;
            }
            else
            {
                JMP .end
            }
        }
        else if (op = 9)
        {
            if (regs{x} != regs{y}) pc = pc + 2;
        }
        else if (op = 0xA)
        {
            i = nnn;
        }
        else if (op = 0xB)
        {
            pc = regs{0} + nnn;
        }
        else if (op = 0xC)
        {
            regs{x} = rand(&seed) & nn;
        }
        else if (op = 0xD)
        {
            x = regs{x} & 63;
            y = regs{y} & 31;
            regs{0xF} = 0;
            c = 0;
            while (c <! n)
            {
                t = x;
                c2 = 0;
                while (c2 <! 8)
                {
                    if (ram{i + c} & (0x80 >> c2))
                    {
                        if (fb{(y *! 64 + t) /! 8} & (0x80 >> (y *! 64 + t) %! 8))
                        {
                            regs{0xF} = 1;
                            set_pixel(t, y, 0, fb);
                        }
                        else
                        {
                            set_pixel(t, y, 1, fb);
                        }
                    }
                    c2 = c2 + 1;
                    t = t + 1;
                    if (t >! 63) JMP .drawnext
                }
.drawnext:
                c = c + 1;
                y = y + 1;
                if (y >! 31) JMP .drawend
            }
.drawend:
        }
        else if (op = 0xE)
        {
            if (nn = 0x9E)
            {
                if (key = regs{x}) pc = pc + 2;
            }
            else if (nn = 0xA1)
            {
                if (key != regs{x}) pc = pc + 2;
                else key = 0xFE;
            }
            else
            {
                JMP .end
            }
        }
        else if (op = 0xF)
        {
            if (nn = 0x07)
            {
                regs{x} = delay;
            }
            else if (nn = 0x0A)
            {
                key = get_key();
                while (key = 0xFE) key = get_key();
                if (key = 0xFF) JMP .end
                regs{x} = key;
            }
            else if (nn = 0x15)
            {
                delay = regs{x};
            }
            else if (nn = 0x18)
            {
                # sound... dont care!
            }
            else if (nn = 0x1E)
            {
                i = i + regs{x};
            }
            else if (nn = 0x29)
            {
                i = 0x50 + regs{x} *! 5;
            }
            else if (nn = 0x33)
            {
                t = regs{x};
                ram{i} = t /! 100;
                t = t %! 100;
                ram{i + 1} = t /! 10;
                ram{i + 2} = t %! 10;
            }
            else if (nn = 0x55)
            {
                memcpy(ram + i, regs, x + 1, -1);
            }
            else if (nn = 0x65)
            {
                memcpy(regs, ram + i, x + 1, -1);
            }
            else if (nn = 0x75)
            {
                memcpy(ram + i, rpl, maxu(8, x + 1), -1);
            }
            else if (nn = 0x85)
            {
                memcpy(rpl, ram + i, maxu(8, x + 1), -1);
            }
            else
            {
                JMP .end
            }
        }
        else
        {
            JMP .end
        }

        instrs = instrs + 1;
        if (instrs = 55)
        {
            sleep(1);
            instrs = 0;
            if (delay != 0) delay = maxs(0, delay - 4);

            if (key_pressed())
            {
                key = get_key();
                if (key = 0xFF) JMP .end
                seed = time(0) *! key;
            }
        }
    }

.end:
    MOV AX, 0x02
    INT 0x10
}

function set_pixel(x, y, on, fb)
(p, c)
{
    p = y *! 64 + x;
    fb{p /! 8} = fb{p /! 8} ^ (1 << 7 - p %! 8);
    p = (y + 7) *! 640 + x + 7;
    c = 0;
    while (c <! 8)
    {
        memset(p, on *! 0xFF, 1, 0xA000);
        c = c + 1;
        p = p + 80;
    }
}

function get_key()
(scan)
{
    scan = 0;
    MOV AH, 0
    INT 0x16
    MOV [scan], AH
    if (keyboard + scan >! keyboard_end) return 0xFE;
    return keyboard{scan};
}

function key_pressed()
{
    MOV AH, 1
    INT 0x16
    JZ .e
    return 1;
.e: return 0;
}

keyboard:
DB 0xFE, 0xFF
DB 1, 2, 3, 0xC
DB 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE
DB 4, 5, 6, 0xD
DB 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE
DB 7, 8, 9, 0xE
DB 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE
DB 0xA, 0, 0xB, 0xF
keyboard_end:

font:
DB 0xF0, 0x90, 0x90, 0x90, 0xF0 # 0
DB 0x20, 0x60, 0x20, 0x20, 0x70 # 1
DB 0xF0, 0x10, 0xF0, 0x80, 0xF0 # 2
DB 0xF0, 0x10, 0xF0, 0x10, 0xF0 # 3
DB 0x90, 0x90, 0xF0, 0x10, 0x10 # 4
DB 0xF0, 0x80, 0xF0, 0x10, 0xF0 # 5
DB 0xF0, 0x80, 0xF0, 0x90, 0xF0 # 6
DB 0xF0, 0x10, 0x20, 0x40, 0x40 # 7
DB 0xF0, 0x90, 0xF0, 0x90, 0xF0 # 8
DB 0xF0, 0x90, 0xF0, 0x10, 0xF0 # 9
DB 0xF0, 0x90, 0xF0, 0x90, 0x90 # A
DB 0xE0, 0x90, 0xE0, 0x90, 0xE0 # B
DB 0xF0, 0x80, 0x80, 0x80, 0xF0 # C
DB 0xE0, 0x90, 0x90, 0x90, 0xE0 # D
DB 0xF0, 0x80, 0xF0, 0x80, 0xF0 # E
DB 0xF0, 0x80, 0xF0, 0x80, 0x80 # F
font_end:
