import "/lib/exe.kc"
import "/lib/print.kc"
import "/lib/fs.kc"

function main(argc, argv, cwdpat)
(buf{32 *! 1024}, in{1024}, file{FILE}, s[STRING], state, i, cmd[STRING], mark, line)
{
    if (argc <! 2)
    {
        format(print, "Usage: %s <file>\r\n", argv);
        return;
    }

    if (!openat(0, cwdpat, file) or !openat(file, argv + STRING *! 2, file))
    {
        format(print, "Could not open '%s'.\r\n", argv + STRING *! 2);
        return;
    }

    read(file, 32 *! 1024, buf, -1);

    mark = 0;
    line = 0;
    while (1)
    {
        print("EDLIN>");
        input(in, 1024);
        state = 0;
        i = 0;
        while (strtok(in, ' ', s, &state))
        {
            if (s[STRINGLEN] = 0) JMP .c
            if (i = 0) memcpy(cmd, s, STRING, -1);
            i = i + 1;
.c:
        }
        if (i = 0) JMP .n

        if (stricmp(cmd, "q")) return;

        if (stricmp(cmd, "p"))
        {
            i = 0;
            while (i <! 23)
            {
                print_line(buf, mark, line);
                add_line(buf, &mark, &line, 1);
                i = i + 1;
            }
        }
        else if (stricmp(cmd, "l"))
        {
            add_line(buf, &mark, &line, -11);
            i = 0;
            while (i <! 23)
            {
                print_line(buf, mark, line);
                add_line(buf, &mark, &line, 1);
                i = i + 1;
            }
            add_line(buf, &mark, &line, -12);
        }
.n:
    }
}

function print_line(buf, mark, line)
(s[STRING], i)
{
    s[STRINGPTR] = buf + mark;
    i = 0;
    while (s[STRINGPTR]{i} != '\n') i = i + 1;
    s[STRINGLEN] = i;
    format(print, "%d: %s\r\n", line, s);
}

function add_line(buf, mark, line, lines)
(l)
{
    l = maxs(0, *line + lines);
    while (*line != l)
    {
        if (lines >$ 0)
        {
            while (buf{*mark} != '\n') *mark = *mark + 1;
            *mark = *mark + 1;
            *line = *line + 1;
        }
        else
        {
            *mark = *mark - 2;
            while (*mark != -1 and buf{*mark} != '\n') *mark = *mark - 1;
            *mark = *mark + 1;
            *line = *line - 1;
        }
    }
}
